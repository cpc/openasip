# Copyright 2002-2008 Tampere University.  All Rights Reserved.
#
# This file is part of TTA-Based Codesign Environment (TCE).
#
# TCE is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License version 2 as published by the Free
# Software Foundation.
#
# TCE is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# TCE; if not, write to the Free Software Foundation, Inc., 51 Franklin St,
# Fifth Floor, Boston, MA  02110-1301  USA
#
# As a special exception, you may use this file as part of a free software
# library without restriction.  Specifically, if other files instantiate
# templates or use macros or inline functions from this file, or you compile
# this file and link it with other files to produce an executable, this file
# does not by itself cause the resulting executable to be covered by the GNU
# General Public License.  This exception does not however invalidate any
# other reasons why the executable file might be covered by the GNU General
# Public License.

from binding_generator import *

prefix1 = "./Scheduler/"
prefix2 = "./Algorithms/"
prefix3 = "./BasicBlockScheduler/"


bg = binding_generator_t(
    module_name = "SchedulerModules",
    call_policies = (('BaseSchedulerModule',
                      [('interPassData', return_internal_reference())]),
                     ('HelperSchedulerModule',
                      [('parent', return_internal_reference()),]),
                     ('BypasserModule',
                      [('bypasser', return_internal_reference())]),
                     ('CLBBypasserModule',
                      [('bypasser', return_internal_reference())]),
                     ('DSFillerModule',
                      [('filler', return_internal_reference())]),
                     ('CopyingDSFillerModule',
                      [('filler', return_internal_reference())]),
                     ),
    headers = [prefix1 + "BaseSchedulerModule.hh",
               prefix1 + "HelperSchedulerModule.hh",
               prefix2 + "BypasserModule.hh",
               prefix3 + "CLBBypasserModule.hh",
               prefix2 + "CopyingDelaySlotFiller.hh",
               prefix2 + "DSFillerModule.hh",
               prefix3 + "CopyingDSFillerModule.hh"
               ],
    extra_headers = ["ObjectState.hh",
                     "DataDependenceGraph.hh",
                     "Machine.hh",
                     "SchedulerPluginLoader.hh",
                     "Program.hh",
                     "InterPassData.hh",
                     "SoftwareBypasser.hh",
                     "ResourceManager.hh",
                     "BasicBlock.hh",
                     "UniversalMachine.hh",
                     "ControlFlowGraph.hh",
                     ],
    )

bg.run()
