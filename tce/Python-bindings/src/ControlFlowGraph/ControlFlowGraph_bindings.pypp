# Copyright 2002-2008 Tampere University.  All Rights Reserved.
#
# This file is part of TTA-Based Codesign Environment (TCE).
#
# TCE is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License version 2 as published by the Free
# Software Foundation.
#
# TCE is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# TCE; if not, write to the Free Software Foundation, Inc., 51 Franklin St,
# Fifth Floor, Boston, MA  02110-1301  USA
#
# As a special exception, you may use this file as part of a free software
# library without restriction.  Specifically, if other files instantiate
# templates or use macros or inline functions from this file, or you compile
# this file and link it with other files to produce an executable, this file
# does not by itself cause the resulting executable to be covered by the GNU
# General Public License.  This exception does not however invalidate any
# other reasons why the executable file might be covered by the GNU General
# Public License.

from binding_generator import *

prefix="./ControlFlowGraph/"

bg = binding_generator_t(
    module_name = "ControlFlowGraph",
    call_policies = (('BasicBlock',
                      [('copy', return_value_policy(manage_new_object)),
                       ('statistics', return_internal_reference()),
                       ('usedAfter', return_internal_reference()),
                       ]),
                     ('BasicBlockNode',
                      [('basicBlock', return_internal_reference())]),
                     ('ControlFlowGraph',
                      [('entryNode', return_value_policy(reference_existing_object)),
                       ('exitNode', return_value_policy(reference_existing_object)),
                       ('program', return_value_policy(reference_existing_object))]),
                     ),
    included_members = ["writeToDotFile"],

    headers = [prefix + "BasicBlock.hh",
               prefix + "BasicBlockNode.hh",
               prefix + "ControlFlowEdge.hh",
               prefix + "CFGStatistics.hh",
               prefix + "ControlFlowGraph.hh"
               ],
    extra_headers = ["Procedure.hh",
                     "DataDependenceGraph.hh",
                     "InterPassData.hh",
                    ],
    extra_member_registrations =
    [('ControlFlowGraph',
      ["""def("node"
      , (::BasicBlockNode & ( ::ControlFlowGraph::* )( int const ) const)(&::ControlFlowGraph::node),
      ( bp::arg("index") ),
            bp::return_internal_reference<1>())""",
       """def("node"
       , (::BasicBlockNode & ( ::ControlFlowGraph::* )( int const,bool ) const)( &::ControlFlowGraph::node )
       , ( bp::arg("index"), bp::arg("cacheResult") ),
       bp::return_internal_reference<1>())""",
       """def("nodeCount", &::ControlFlowGraph::nodeCount)"""])]
    )

bg.run()
