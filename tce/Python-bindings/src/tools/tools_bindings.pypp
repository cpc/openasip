# Copyright 2002-2008 Tampere University.  All Rights Reserved.
#
# This file is part of TTA-Based Codesign Environment (TCE).
#
# TCE is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License version 2 as published by the Free
# Software Foundation.
#
# TCE is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# TCE; if not, write to the Free Software Foundation, Inc., 51 Franklin St,
# Fifth Floor, Boston, MA  02110-1301  USA
#
# As a special exception, you may use this file as part of a free software
# library without restriction.  Specifically, if other files instantiate
# templates or use macros or inline functions from this file, or you compile
# this file and link it with other files to produce an executable, this file
# does not by itself cause the resulting executable to be covered by the GNU
# General Public License.  This exception does not however invalidate any
# other reasons why the executable file might be covered by the GNU General
# Public License.

from binding_generator import *
import os

prefix = "./tools/"

TCEString_converter_declaration =  """
#include <boost/python/module.hpp>
#include <boost/python/def.hpp>
#include <boost/python/to_python_converter.hpp>

namespace sandbox { namespace {

  struct TCEString_to_python_str
  {
    static PyObject* convert(TCEString const& s)
    {
      return boost::python::incref(boost::python::object((std::string)s).ptr());
    }
  };

  void register_converters()
  {
    using namespace boost::python;

    boost::python::to_python_converter<
      TCEString,
      TCEString_to_python_str>();
  };

}} // namespace sandbox::<anonymous>

"""

bg = binding_generator_t(
    module_name = "tools",
    call_policies = (('NullSimValue',
                      [('instance', return_value_policy(reference_existing_object))]),
                     ),
    headers = [prefix + "SimValue.hh",
               prefix + "TCEString.hh"
               ],
    extra_headers = ["Exception.hh"],

    extra_declarations = [(None, TCEString_converter_declaration)],

    # See below why this is commented out.
    #extra_registrations = [(None, "sandbox::register_converters();")],

    excluded_members = [('SimValue', ['Value', 'value_'])],

    # Py++ does not generate these for some reason.
    extra_member_registrations =
    [('SimValue', ["""def("width", &SimValue::width)
        .def("isActive", &SimValue::isActive)
        .def("setActive", &SimValue::setActive)
        .def("clearActive", &SimValue::clearActive)
        .def("intValue", &SimValue::intValue)
        .def("unsignedValue", &SimValue::unsignedValue)
        .def("sIntWordValue", &SimValue::sIntWordValue)
        .def("uIntWordValue", &SimValue::uIntWordValue)
        .def("doubleWordValue", &SimValue::doubleWordValue)
        .def("floatWordValue", &SimValue::floatWordValue)
        .def( bp::self + bp::other< SIntWord >() )
        .def( bp::self + bp::other< UIntWord >() )
        .def( bp::self + bp::other< FloatWord >() )
        .def( bp::self + bp::other< DoubleWord >() )
        .def( bp::self - bp::other< SIntWord >() )
        .def( bp::self - bp::other< UIntWord >() )
        .def( bp::self - bp::other< FloatWord >() )
        .def( bp::self - bp::other< DoubleWord >() )
        .def( bp::self / bp::other< SIntWord >() )
        .def( bp::self / bp::other< UIntWord >() )
        .def( bp::self / bp::other< FloatWord >() )
        .def( bp::self / bp::other< DoubleWord >() )
        .def( bp::self * bp::other< SIntWord >() )
        .def( bp::self * bp::other< UIntWord >() )
        .def( bp::self * bp::other< FloatWord >() )
        .def( bp::self * bp::other< DoubleWord >() )
        .def( bp::self == bp::self )
        .def( bp::self == bp::other< int >() )
        .def( bp::self == bp::other< SIntWord >() )
        .def( bp::self == bp::other< UIntWord >() )
        .def( bp::self == bp::other< FloatWord >() )
        .def( bp::self == bp::other< DoubleWord >() )"""])]
    )

bg.run()

###
### For some reason the registration code
### sandbox::register_converters(); does not go
### at the end of the generated Boost.Python module.
### This causes the converter registration to be
### overwritten.
###
### The following ed script sticks in the conversion
### in a very crude way.
###

os.system("""ed tools.main.cpp <<EOF
,s/register_TCEString_class();/register_TCEString_class();sandbox::register_converters();/g
w
q
EOF
""")

