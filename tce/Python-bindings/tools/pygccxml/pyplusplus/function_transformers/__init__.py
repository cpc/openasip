# Copyright (c) 2002-2009 Tampere University.
#
# This file is part of TTA-Based Codesign Environment (TCE).
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
# Helper classes for wrapper function creation

"""This sub-package provides text substitution services for creating C++ functions.

The helper classes in this package are meant to be used by the actual
calldef code creators (that are not part of this sub-package). They
implement the core of the "arg policy" mechanism which can be used by
a user to modify the source code for a function.

The main class of this sub-package is the class L{substitution_manager_t}. This
class maintains two sets of special variables, one for the wrapper function
and one for the virtual function, and provides text substitution services.
The variables contain parts of source code that can be inserted into the
function source code template which is generated by the user of the class.


"""

from transformer import transformer_t
import transformers
from function_transformation import function_transformation_t

def output( *args, **keywd ):
    def creator( function ):
        return transformers.output_t( function, *args, **keywd )
    return creator

def input( *args, **keywd ):
    def creator( function ):
        return transformers.input_t( function, *args, **keywd )
    return creator

def inout( *args, **keywd ):
    def creator( function ):
        return transformers.inout_t( function, *args, **keywd )
    return creator

def input_static_array( *args, **keywd ):
    def creator( function ):
        return transformers.input_static_array_t( function, *args, **keywd )
    return creator

def output_static_array( *args, **keywd ):
    def creator( function ):
        return transformers.output_static_array_t( function, *args, **keywd )
    return creator

def modify_type( *args, **keywd ):
    def creator( function ):
        return transformers.type_modifier_t( function, *args, **keywd )
    return creator

def input_c_buffer( *args, **keywd ):
    def creator( function ):
        return transformers.input_c_buffer_t( function, *args, **keywd )
    return creator

def transfer_ownership( *args, **keywd ):
    def creator( function ):
        return transformers.transfer_ownership_t( function, *args, **keywd )
    return creator
