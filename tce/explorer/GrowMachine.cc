/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file GrowMachine.cc
 *
 * Explorer plugin that adds resources until cycle count doesn't go down
 * anymore.
 *
 * @author Jari M채ntyneva 2007 (jari.mantyneva-no.spam-tut.fi)
 * @author Esa M채채tt채 2008 (esa.maatta-no.spam-tut.fi)
 * @note rating: red
 */

#include <vector>
#include <set>
#include <string>

#include "DesignSpaceExplorerPlugin.hh"

#include "DSDBManager.hh"
#include "Machine.hh"

#include "MachineResourceModifier.hh"
#include "DesignSpaceExplorer.hh"
#include "CostEstimates.hh"
#include "SimulatorConstants.hh"

#include "Conversion.hh"

using namespace TTAProgram;
using namespace TTAMachine;
using namespace HDB;

/**
 * Explorer plugin that adds resources until cycle count doesn't go down
 * anymore.
 *
 * Supported parameters:
 */
class GrowMachine : public DesignSpaceExplorerPlugin {
    PLUGIN_DESCRIPTION("Adds resources until cycle count doesn't go down anymore.");
    
    GrowMachine(): DesignSpaceExplorerPlugin(), 
        superiority_(10) {

        // compulsory parameters
        // no compulsory parameters

        // parameters that have a default value
        addParameter(superiorityPN_, UINT, false, 
                Conversion::toString(superiority_));
    }

    virtual bool requiresStartingPointArchitecture() const { return true; }
    virtual bool producesArchitecture() const { return true; }
    virtual bool requiresHDB() const { return true; }
    virtual bool requiresSimulationData() const { return false; }

    /**
     * Optimizes the architecture in regards of the cycle count.
     *
     * Optimizes the architecture by growing it until cycle count doesn't go 
     * down anymore.
     *
     * @TODO: average cycle count lowering, or lowest/largest lowering
     *        percentage among apps now it's largest lowering among apps.
     * @TODO: parametrize machine growing, example how many buses to add
     *        each step.
     *
     * @return Configurations (including only adf) generated by CycleOptimizer.
     *         Best result is at the top of the list.
     */
    virtual std::vector<RowID>
    explore(const RowID& configurationID, const unsigned int&) {
        std::vector<RowID> result;

        readParameters();

        TTAMachine::Machine* adf = NULL;
        DSDBManager::MachineConfiguration configuration;
        DSDBManager& dsdb = db();

        // get the architecture from the database
        try {
            configuration = dsdb.configuration(configurationID);
            adf = dsdb.architecture(configuration.architectureID);
        } catch (const KeyNotFound& e) {
            debugLog(std::string("Fetching architecture from DSDB failed in "
                     "GrowMachine. ")
                     + e.errorMessage() + std::string(" ")
                     + e.errorMessageStack());
            result.push_back(configurationID);
            delete adf;
            return result;
        }

        // evaluate to get current cycle counts
        DesignSpaceExplorer explorer;
        explorer.setDSDB(dsdb);
        CostEstimates estimates;
        DSDBManager::MachineConfiguration startConf;
        startConf.architectureID = dsdb.addArchitecture(*adf);
        startConf.hasImplementation = false;
        try {
            bool estimate = false;
            if (!explorer.evaluate(startConf, estimates, estimate)) {
                debugLog(std::string("Evaluate failed in GrowMachine."));
                result.push_back(configurationID);
                delete adf;
                adf = NULL;
                return result;
            }
        } catch (const Exception& e) {
            debugLog(std::string("Error in GrowMachine: ")
                    + e.errorMessage() + std::string(" ")
                    + e.errorMessageStack());
            result.push_back(configurationID);
            delete adf;
            adf = NULL;
            return result;
        }

        std::vector<ClockCycleCount> cycleCounts = 
            db().cycleCounts(startConf);


        if (cycleCounts.size() < 1) {
            std::ostringstream msg(std::ostringstream::out);
            msg << "GrowMachine error: Couldn't evaluate cycle "
                << "counts for applications, correct_simulation_output"
                << " probably missing." << std::endl;
            verboseLog(msg.str());
            result.push_back(configurationID);
            delete adf;
            adf = NULL;
            return result;
        }

        // all applications minimum cycle count
        ClockCycleCount currentMinCycles = cycleCounts.at(0);
        for (int i = 1; i < (int)cycleCounts.size(); i++) {
            if (cycleCounts.at(i) < currentMinCycles) {
                currentMinCycles = cycleCounts.at(i);
            }
        }

        ClockCycleCount prevMinCycles = 0;
        MachineResourceModifier modifier;
        std::map<ClockCycleCount, RowID> resultMap;
        do {
            prevMinCycles = currentMinCycles;
            try {
                // These parameters passed to the modifier can be changed.
                // They tell how many units of same type are added each time.
                modifier.addBusesByAmount(8, *adf);
                modifier.increaseAllRFsThatDiffersByAmount(1, *adf);
                modifier.increaseAllFUsThatDiffersByAmount(1, *adf);
                // @TODO immediate unit addition

                DSDBManager::MachineConfiguration newConfiguration;
                try {
                    newConfiguration.architectureID = dsdb.addArchitecture(*adf);
                } catch (const RelationalDBException& e) {
                    // Error occurred while adding adf to the dsdb, adf
                    // probably too big
                    break;
                }
                newConfiguration.hasImplementation = false;
                RowID confID = dsdb.addConfiguration(newConfiguration);
                CostEstimates newEstimates;

                // evaluate to get new cycle counts
                if (explorer.evaluate(newConfiguration, newEstimates, false)) {
                    // resets the currentMinCycles 
                    std::vector<ClockCycleCount> newCycleCounts = 
                        db().cycleCounts(newConfiguration);

                    currentMinCycles = newCycleCounts.at(0);
                    for (int i = 1; i < (int)newCycleCounts.size(); i++) {
                        if (newCycleCounts.at(i) < currentMinCycles) {
                            currentMinCycles = newCycleCounts.at(i);
                        }
                    }

                    if (Application::verboseLevel() > 0) {
                        std::ostringstream msg(std::ostringstream::out);
                        msg << "GrowMachine produced config: "
                            << confID << ", with cycle count: " 
                            << currentMinCycles << " (" 
                            << calculateImprovement(currentMinCycles, 
                                    prevMinCycles)
                            << "% better)";
                        verboseLog(msg.str())
                    }

                    if (checkSuperiority(currentMinCycles, prevMinCycles)) {
                        // only add config if it meets the superiority
                        // requirements regarding clock cycles
                        resultMap[currentMinCycles] = confID;
                    } else {
                        break;
                    }
                } else {
                    // evaluating failed
                    debugLog("GrowMachine: Evaluating config with id: " 
                            + Conversion::toString(confID) 
                            + " failed. This is probably a bug.");
                    break;
                }

            } catch (const Exception& e) {
                debugLog(std::string("Error in GrowMachine: ")
                        + e.errorMessage() + std::string(" ")
                        + e.errorMessageStack());
                result.push_back(configurationID);
                delete adf;
                adf = NULL;
                return result;
            }
        } while (true);

        std::map<ClockCycleCount, RowID>::const_iterator mapIter = 
            resultMap.begin();
        for (; mapIter != resultMap.end(); mapIter++) {
            result.push_back((*mapIter).second);
        }
        if (result.empty()) {
            // if now new configuration created return the old
            verboseLogC("GrowMachine could not generate new configs.", 2)
            result.push_back(configurationID);
        }
        delete adf;
        adf = NULL;
        return result;
    }

private:
    // parameter names
    static const std::string superiorityPN_;

    // parameters
    /// Percentage value of how much faster schedules are wanted until cycle
    /// count optimization is stopped.
    unsigned int superiority_;

    /**
     * Reads the parameters given to the plugin.
     */
    void readParameters() {
        // optional parameters
        readOptionalParameter(superiorityPN_, superiority_);
    }


    /**
     * Checks whether cycle counts have been lowered enough.
     *
     * @param newCC The new minimum cycle count.
     * @param oldCC The old minimum cycle count.
     */
    inline bool checkSuperiority(
        const ClockCycleCount& newCC, 
        const ClockCycleCount& oldCC) const {
        
        if ((newCC < oldCC) &&
                (((static_cast<double>(superiority_) / 100) * oldCC) <
                 (oldCC - newCC))) {
            return true;
        }
        return false;
    }

    /**
     * Calculates the percentage of improvement in cycle count
     *
     * @param newCC The new minimum cycle count.
     * @param oldCC The old minimum cycle count.
     */
    inline double calculateImprovement(
        const ClockCycleCount& newCC, 
        const ClockCycleCount& oldCC) const {
        
        return (1.0 -(static_cast<double>(newCC)/oldCC))*100.0;
    }

};

const std::string GrowMachine::superiorityPN_("superiority");

EXPORT_DESIGN_SPACE_EXPLORER_PLUGIN(GrowMachine)
