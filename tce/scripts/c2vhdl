#!/bin/bash

# Copyright (c) 2002-2009 Tampere University.
#
# This file is part of TTA-Based Codesign Environment (TCE).
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

# input *.c
# output .vhdl, .img, .adf, .bem

# Expects that tce programs explore, tcecc, createbem, generateprocessor and
# generatebits are to be found from path.

# TODO: correct result for simulation should be given?
# TODO: multiple c programs as parameters.
# TODO: support for giving ADF as parameter

function pexit {
    [ "${2}x" != "x" ] && echo "${2}"
    rm -rf "${tmp_dir}"
    exit "${1}"
}

function check_in_path {
    for prog in $@; do
        which "${prog}" &>/dev/null || { 
            echo "${prog} program cannot be found from path."
            exit 1 
        }
    done
}

function check_minimal_adf {

    src_path=`dirname $0`/../data/mach/minimal_be.adf
    if [ -e "${src_path}" ]; then 
        adf="${src_path}"
        return
    fi


    if which "tce-config" &>/dev/null; then 
        adf="$(tce-config --prefix)/share/tce/data/mach/minimal_be.adf"
        if [ -e "${adf}" ]; then
            return
        fi
    fi

    echo "minimal_be.adf not found."
    exit 1
}

# ----------------- process parameters ------------------------------------ #

[ "${1}x" == "-ex" ] && { shift; EVALUATE="true"; }

[ "${1}x" == "x" ] && { echo "Code file in c should be given as a parameter."; exit 1; }

if [ "${1}x" == "--helpx" -o "${1}x" == "-hx" ]; then
    echo "Usage: c2vhdl [options] c_source_file"
    echo ""
    echo "Options:"
    echo "-e    Evaluate and generate estimation data."
    exit
fi

# check that the necessary programs are found from path
check_in_path explore tcecc createbem generateprocessor generatebits

check_minimal_adf

# ------------------------------------------------------------------------- #

tmp_dir="$(mktemp -d tmpXXXXX)"

name="$(basename "${1}" .c)"
tmp_name="${tmp_dir}/${name}"
tmp_pname="${tmp_dir}/program"
proge_dir=proge-output
# this could be a commandline parameter
dmem_width_in_maus=4

tcecc "${1}" --emit-llvm -O2 -o ${tmp_pname}.bc || pexit 1
explore -a ${adf} -d ${tmp_dir} ${tmp_name}.dsdb &>/dev/null || pexit 1

# TODO: use simpleicoptimizer if using some other adf than minimal
#new_conf="$(explore -e SimpleICOptimizer -s 1 ${tmp_name}.dsdb \
#| tail -n1 | grep -x '[[:space:]][0-9][0-9]*' | tr -d '[[:space:]]')"
#
#[ "${new_conf}x" == "x" ] && pexit 1 "Explorer failed to create a new config."

new_conf="$(explore -e ImplementationSelector -s 1 ${tmp_name}.dsdb \
| tail -n1 | grep -x '[[:space:]][0-9][0-9]*' | tr -d '[[:space:]]')"

[ "${new_conf}x" == "x" ] && pexit 1 "Explorer failed to create a new config."

# get estimation data if it was asked
if [ "${EVALUATE}x" == "truex" ]; then
    { explore -e Evaluate -s ${new_conf} -u print="true" ${tmp_name}.dsdb || pexit 1; } | grep -v 'No new configurations'
fi

explore -w ${new_conf} ${tmp_name}.dsdb 1>/dev/null || pexit 1
mv ${new_conf}.adf ${name}.adf; mv ${new_conf}.idf ${name}.idf

tcecc -a ${name}.adf -o ${tmp_name}.tpef ${tmp_pname}.bc 1>/dev/null || pexit 1
createbem ${name}.adf 1>/dev/null || pexit 1
generateprocessor -b ${name}.bem -i ${name}.idf -o ${proge_dir} ${name}.adf 1>/dev/null || pexit 1
generatebits -b ${name}.bem -d -w ${dmem_width_in_maus} -p ${tmp_name}.tpef -x ${proge_dir} ${name}.adf 1>/dev/null || pexit 1

pexit 0
