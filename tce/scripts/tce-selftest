#!/usr/bin/env python
# -*- coding: utf-8
# Copyright (c) 2002-2011 Tampere University of Technology.
#
# This file is part of TTA-Based Codesign Environment (TCE).
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#
# Runs basic tests to verify a TCE installation (installed somewhere in PATH)
# works.
#
# Does not test the functionality of the tools, just ensures the tools can
# be executed and do what they are expected to do from installation paths.
# It's sort of a "smoke test" that tells whether there is something seriously
# broken with the TCE installation.
#
# (C) 2009-2011 Pekka J‰‰skel‰inen

# exploit the unittest framework even though this is actually a system test
import unittest, os, tempfile, signal, time, glob
from subprocess import Popen, PIPE

class TCETestCase(unittest.TestCase):

    def cleanup_files(self, files):
        for f in files:
            if os.path.exists(f):
                os.unlink(f)

    def cleanup_dirs(self, dirs):
        for d in dirs:
            if os.path.exists(d):
                os.rmdir(d)
                
    
    def runWithTimeout(self, command, timeoutSecs, inputStream = ""):
        """
        Runs the given process until it exits or the given time out is reached.

        Returns a tuple: (bool:timeout, str:stdout, str:stderr, int:exitcode)
        """
        timePassed = 0.0
        increment = 0.01

        stderrFD, errFile = tempfile.mkstemp()
        stdoutFD, outFile = tempfile.mkstemp()

        process =  Popen(command, shell=True, stdin=PIPE, stdout=stdoutFD, stderr=stderrFD, close_fds=False)

        if process == None:
            print "Could not create process"
            sys.exit(1)

        try:
            if inputStream != "":
                for line in inputStream:
                    process.stdin.write(line)
                    process.stdin.flush()

            while True:
                status = process.poll()
                if status != None:
                    # Process terminated succesfully.
                    stdoutSize = os.lseek(stdoutFD, 0, 2)
                    stderrSize = os.lseek(stderrFD, 0, 2)

                    os.lseek(stdoutFD, 0, 0)
                    os.lseek(stderrFD, 0, 0)

                    stdoutContents = os.read(stdoutFD, stdoutSize)
                    stderrContents = os.read(stderrFD, stderrSize)

                    os.close(stdoutFD)
                    os.remove(outFile)
                    os.close(stderrFD)
                    os.remove(errFile)
                    
                    return (False, stdoutContents, stderrContents, process.returncode)

                if timePassed < timeoutSecs:
                    time.sleep(increment)
                    timePassed = timePassed + increment
                else:
                    # time out, kill the process.
                    stdoutSize = os.lseek(stdoutFD, 0, 2)
                    stderrSize = os.lseek(stderrFD, 0, 2)

                    os.lseek(stdoutFD, 0, 0)
                    os.lseek(stderrFD, 0, 0)

                    stdoutContents = os.read(stdoutFD, stdoutSize)
                    stderrContents = os.read(stderrFD, stderrSize)

                    os.close(stdoutFD)
                    os.remove(outFile)
                    os.close(stderrFD)
                    os.remove(errFile)
                    os.kill(process.pid, signal.SIGTSTP)
                    return (True, stdoutContents, stderrContents, process.returncode)
        except Exception, e:
            # if something threw exception (e.g. ctrl-c)
            os.kill(process.pid, signal.SIGTSTP)
            try:
                # time out, kill the process.
                # time out, kill the process.
                stdoutSize = os.lseek(stdoutFD, 0, 2)
                stderrSize = os.lseek(stderrFD, 0, 2)

                os.lseek(stdoutFD, 0, 0)
                os.lseek(stderrFD, 0, 0)

                stdoutContents = os.read(stdoutFD, stdoutSize)
                stderrContents = os.read(stderrFD, stderrSize)

                os.close(stdoutFD)
                os.remove(outFile)
                os.close(stderrFD)
                os.remove(errFile)
                os.kill(process.pid, signal.SIGTSTP)                
            except:
                pass

            return (False, stdoutContents, stderrContents, process.returncode)

    
    def get_helloWorldCFile(self):
        "Returns a .c file (name) which contains the Hello World code."
        
        hello_world_c = """
            #include <stdio.h>

            int main() {
                /* test that the common printout functions work */
                putchar('H');
                puts("ello ");
                iprintf("TTA ");
                printf("World!\\n");
                return 0;
            }
            
            """
        (fd, c_file_name) = tempfile.mkstemp(".c")
        os.write(fd, hello_world_c)
        os.close(fd)
        return c_file_name


    prefix = None
    def get_tcePrefix(self):
        "Returns the path where TCE has been installed."
        if TCETestCase.prefix is None:
            if 'TCE_INSTALL_DIR' in os.environ.keys():
                TCETestCase.prefix = os.environ['TCE_INSTALL_DIR']
            else:
                (timeout, TCETestCase.prefix, stderr, code) = \
                        self.runWithTimeout("tce-config --prefix", 60)
                TCETestCase.prefix = TCETestCase.prefix and TCETestCase.prefix.strip()
            assert TCETestCase.prefix is not None and TCETestCase.prefix != "", \
                    "Could not find TCE prefix. Is TCE installed in PATH?"

        return TCETestCase.prefix


    minimal_adf = None
    def get_minimalADF(self):
        if TCETestCase.minimal_adf is None:
            TCETestCase.minimal_adf = self.get_tcePrefix() + "/share/tce/data/mach/minimal.adf"
            assert os.path.exists(TCETestCase.minimal_adf)
        return TCETestCase.minimal_adf

    minimal_stdout_adf = None
    def get_minimalStdoutADF(self):
        if TCETestCase.minimal_stdout_adf is None:
            TCETestCase.minimal_stdout_adf = self.get_tcePrefix() + "/share/tce/data/mach/minimal_with_stdout.adf"
            assert os.path.exists(TCETestCase.minimal_stdout_adf), \
                   "Could not find minimal_with_stdout.adf."
        return TCETestCase.minimal_stdout_adf


class TestCompiler(TCETestCase):
    """Test compilation from C"""

    def setUp(self):
        self.hello_world_file = self.get_helloWorldCFile()

        (fd, self.ocl_kernel_fn) = tempfile.mkstemp(".cl")
        os.write(fd, opencl_example_kernel)
        os.close(fd)

        (fd, self.ocl_host_fn) = tempfile.mkstemp(".c")
        os.write(fd, opencl_example_host)
        os.close(fd)

        self.runWithTimeout("tcecc --clear-plugin-cache", 1)

    def tearDown(self):
        os.unlink(self.hello_world_file)
        os.unlink(self.ocl_kernel_fn)
        os.unlink(self.ocl_host_fn)

    def _verify_output(self, tpef):
        (timeout, stdout, stderr, code) = \
           self.runWithTimeout("ttasim -a %s -p %s --no-debugmode" %
                               (self.get_minimalStdoutADF(), tpef), 15*60)
        self.assertEquals(stdout.strip(), "Hello \nTTA World!")
        self.assertEquals(stderr, "")
        self.assertEquals(code, 0)        
        

    def _test_compilation(self, switches):
        (fd, tpef_file_name) = tempfile.mkstemp(".tpef")
        (timeout, stdout, stderr, code) = \
           self.runWithTimeout("tcecc %s -a %s -o %s %s" % \
                               (switches, self.get_minimalStdoutADF(),
                                tpef_file_name, self.get_helloWorldCFile()),
                               20*60)
        self.assertEquals(stdout, "")
        self.assertEquals(stderr, "")
        self.assertEquals(code, 0)

        self._verify_output(tpef_file_name)

    def test_noOpt(self):
        "Test C compilation with -O0"
        self._test_compilation("-O0 --swfp")
        
    def test_opt(self):
        "Test C compilation with -O3"
        self._test_compilation("-O3") 

    def test_opencl_sa(self):
        "Test standalone OpenCL compilation if the support has been enabled"

        (timeout, stdout, stderr, code) = \
           self.runWithTimeout("tcecc --supported-languages", 20*60)
        if "OpenCL C" not in stdout: return

        (fd, tpef_file_name) = tempfile.mkstemp(".tpef")
        (timeout, stdout, stderr, code) = \
           self.runWithTimeout("tcecc --swfp -O3 -a %s -o %s %s %s -loclhost-sa" % \
                               (self.get_minimalStdoutADF(),
                                tpef_file_name, self.ocl_kernel_fn, self.ocl_host_fn),
                               20*60)
        self.assertEquals(stdout, "You are compiling OpenCL code with software floating point emulation!\nExpect abysmal peformance!\n")
        self.assertEquals(stderr, "")
        self.assertEquals(code, 0)

        (timeout, stdout, stderr, code) = \
           self.runWithTimeout("ttasim -a %s -p %s --no-debugmode" %
                               (self.get_minimalStdoutADF(), tpef_file_name), 15*60)
        self.assertEquals(stdout.strip(), "OK")
        self.assertEquals(stderr, "")
        self.assertEquals(code, 0)        


class TestSimulator(TCETestCase):
    """Test simulating with the compiled and debugging engines."""

    def setUp(self):
        if hasattr(self, 'tpef_file_name') and self.tpef_file_name is not None:
            return
        self.hello_world_file = self.get_helloWorldCFile()
        (fd, self.tpef_file_name) = tempfile.mkstemp(".tpef")
        (timeout, stdout, stderr, code) = \
           self.runWithTimeout("tcecc %s -a %s -o %s %s" % \
                               ("-O0 --swfp", self.get_minimalStdoutADF(),
                                self.tpef_file_name, self.get_helloWorldCFile()),
                               20*60)

    def __del__(self):
        os.unlink(self.tpef_file_name)

    def _test_simulation(self, switches):
        (timeout, stdout, stderr, code) = \
           self.runWithTimeout("ttasim %s -a %s -p %s --no-debugmode" %
                               (switches,
                                self.get_minimalStdoutADF(),
                                self.tpef_file_name), 10*60)
        self.assertFalse(timeout)
        self.assertEquals(stdout.strip(), "Hello \nTTA World!")
        self.assertEquals(stderr, "")
        self.assertEquals(code, 0)

    def test_debugging_simulation(self):
        "Test the debugging engine of the simulator"
        self._test_simulation("")

    def test_compiled_simulation(self):
        "Test the compiled engine of the simulator"
        self._test_simulation("-q")    

class TestCustomOps(TCETestCase):
    """Test for custom op functionality"""
    
    def tearDown(self):
        if hasattr(self, 'temp_dir'):
            os.chdir(self.temp_dir)
            self.cleanup_files(['hello.cc', 'hello.opb', 'hello.opp'])
            os.chdir('..')
            os.rmdir(self.temp_dir)
    
    def test_custom_operation_from_c_code(self):
        """Test creating a simple custom operation with simulation code and
        using it from C code"""
        opp_contents = """<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<osal version="0.1">       
  <operation>
    <name>HELLO_WORLD</name>
    <description>Prints hello world to the screen. The most useful operation ever.</description>
    <inputs>1</inputs>
    <outputs>0</outputs>
    <in id="1" type="SIntWord"/>
  </operation>
</osal> 
  """
        opb_src = """
#include "OSAL.hh"
#include <iostream>
        
OPERATION(HELLO_WORLD)

TRIGGER
    std::cout << "Hello TTA Custom Operation World!" << std::endl;
END_TRIGGER;

END_OPERATION(HELLO_WORLD)

"""
        esa = ""

        self.temp_dir = tempfile.mkdtemp()
        os.chdir(self.temp_dir)
        opp = open('hello.opp', 'w+')
        opp.write(opp_contents)
        opp.close()

        cc = open('hello.cc', 'w+')
        cc.write(opb_src)
        cc.close()

        (timeout, stdout, stderr, code) = \
             self.runWithTimeout('buildopset hello', 120)
        self.assertEquals(stdout.strip(), '')
        self.assertEquals(stderr.strip(), '')
        self.assertEquals(code, 0)
        self.assertEquals(os.path.exists('hello.opb'), True)

        (timeout, stdout, stderr, code) = \
                  self.runWithTimeout(\
            "echo 'HELLO_WORLD 0' | testosal", 120)
        self.assertEquals(
            stdout.strip(),
            'Hello TTA Custom Operation World!')


class TestExplorer(TCETestCase):

    def setUp(self):
        self.temp_dir = tempfile.mkdtemp()
        os.chdir(self.temp_dir)
        
    def tearDown(self):
        os.chdir("..")
        os.system('rm -fr %s' % self.temp_dir)

    def test_default_plugins_found(self):
        "Check that the default Explorer plugins are listed."
        (timeout, stdout, stderr, code) = \
                  self.runWithTimeout('explore -g', 120)
        default_plugins = \
          ['FrequencySweepExplorer', 'SimpleICOptimizer',
           'RemoveUnconnectedComponents', 'MinimizeMachine',
           'GrowMachine', 'ImmediateGenerator', 'ImplementationSelector',
           'ComponentAdder', 'Evaluate', 'MinimalOpSet']

        for plugin in default_plugins:
            assert plugin in stdout, '%s not found' % plugin
        
        self.assertEquals(stderr.strip(), '')
        self.assertEquals(code, 0)

    def test_basic_plugins(self):
        "Test the ImplementationSelector and Evaluate explorer plugins (this takes a while!)"
        # Generate .idf using the ImplementationSelector plugin
        (timeout, stdout, stderr, code) = \
             self.runWithTimeout(
            'explore -e ImplementationSelector -a %s -s1 test.dsdb' % \
            self.get_minimalADF(), 120)
        self.assertTrue('Best result configurations:' in stdout)
        self.assertTrue('2' in stdout)
        self.assertEquals(stderr.strip(), '')
        self.assertEquals(code, 0)

        # Dump the .idf a file.
        (timeout, stdout, stderr, code) = \
             self.runWithTimeout(
            'explore -w 2 test.dsdb', 120)
        self.assertEquals(stderr.strip(), '')
        self.assertEquals(code, 0)        
        self.assertTrue('Written ADF file of configuration 2' in stdout)
        self.assertTrue('Written IDF file of configuration 2' in stdout)      
        self.assertTrue(os.path.exists('2.adf'))
        self.assertTrue(os.path.exists('2.idf'))

        # Add a dummy test application.
        dummy_app_c = """
        volatile int input[100];
        volatile int output[100];
        int main() {
           int i = 0;
           for (; i < 100; ++i)
               input[i] = input[i] + output[i]*2;
           return 0;
        }
        """

        os.mkdir('test_app')
        f = open('test_app/test.c', 'w+')
        f.write(dummy_app_c)
        f.close()

        # program.bc
        (timeout, stdout, stderr, code) = \
             self.runWithTimeout(
            'tcecc test_app/test.c -c -o test_app/program.bc', 120)

        # description.txt
        f = open('test_app/description.txt', 'w+')
        f.write("Dummy test application for explorer")
        f.close()

        # max_runtime
        f = open('test_app/max_runtime', 'w+')
        f.write('100')
        f.close()

        # correct_simulation_output
        f = open('test_app/correct_simulation_output', 'w+')
        f.write('\n')
        f.close()

        (timeout, stdout, stderr, code) = \
             self.runWithTimeout(
            'explore -v -d test_app test.dsdb', 120)

        self.assertEquals(stdout, '')
        self.assertEquals(stderr.strip(), '')
        self.assertEquals(code, 0)        


        (timeout, stdout, stderr, code) = \
             self.runWithTimeout(
            'explore -e Evaluate -s 2 test.dsdb', 40*60)

        self.assertFalse(timeout)
        # Evaluate does not generate new configurations
        self.assertTrue('No fitting processor configurations were created.' in stdout)
        self.assertTrue(x.startswith('Warning') for x in stderr.splitlines())
        self.assertEquals(code, 0)

        
        (timeout, stdout, stderr, code) = \
             self.runWithTimeout(
            'explore -c C test.dsdb', 60)        

        #expected_output = "| 1       | test_app         | 12          | 1.32785e-07     | 12.33              | 6262.15 |"

        row = stdout.split('\n')[4]
        id, cycles, energy, delay, area = \
            [float(x.strip()) for x in row.split('|') if x.strip() != '' and x.strip() != 'test_app']

        # Rough checks because the numbers change as the
        # estimation algorithm or the compiler changes.
        self.assertTrue(area > 3000.0)
        self.assertTrue(area < 4000.0)
        self.assertTrue(delay < 14.0)
        self.assertTrue(energy > 1.0e-08)
        self.assertTrue(int(cycles) > 10)
        
        self.assertFalse(timeout)
        self.assertTrue("Configurations in DSDB" in stdout)
        self.assertEquals(stderr, '')
        self.assertEquals(code, 0)

class TestEstimator(TCETestCase):

    def setUp(self):
        self.temp_dir = tempfile.mkdtemp()
        os.chdir(self.temp_dir)
        
    def tearDown(self):
        os.chdir("..")
        os.system('rm -fr %s' % self.temp_dir)

    def test_estimator(self):
        "Test the cost estimator by estimating the area and delay of minimal.adf (this takes a while!)"

        # Generate .idf using explorer
        (timeout, stdout, stderr, code) = \
             self.runWithTimeout(
            'explore -e ImplementationSelector -a %s -s 1 test.dsdb' % \
            self.get_minimalADF(), 120)
        self.assertTrue('Best result configurations:' in stdout)
        self.assertTrue('2' in stdout)
        self.assertEquals(stderr.strip(), '')
        self.assertEquals(code, 0)

        # Dump the .idf a file.
        (timeout, stdout, stderr, code) = \
             self.runWithTimeout(
            'explore -w 2 test.dsdb', 60)
        self.assertEquals(stderr.strip(), '')
        self.assertEquals(code, 0)        
        self.assertTrue('Written ADF file of configuration 2' in stdout)
        self.assertTrue('Written IDF file of configuration 2' in stdout)      
        self.assertTrue(os.path.exists('2.adf'))
        self.assertTrue(os.path.exists('2.idf'))
       
        (timeout, stdout, stderr, code) = \
             self.runWithTimeout(
            'estimate -l -a 2.adf 2.idf', 40*60)

        self.assertFalse(timeout)

        expected = \
        """
total area: 4813 gates
delay of the longest path: 12 ns
"""

        #stdout = expected

        rows = stdout.split('\n')
        area = int(rows[0].split(':')[1].split(' ')[1].strip())
        delay = int(rows[1].split(':')[1].split(' ')[1].strip())

        assert area < 5400 and area > 3000, "area: %d" % area
        self.assertTrue(delay < 14)
        self.assertTrue(x.startswith('Warning') for x in stderr.splitlines())
        self.assertEquals(code, 0)        

class TestProGeAndPIG(TCETestCase):
    "Test the processor generator and the program image generator"
    def setUp(self):
        self.temp_dir = tempfile.mkdtemp()
        os.chdir(self.temp_dir)
        
    def tearDown(self):
        os.chdir("..")
        os.system('rm -fr %s' % self.temp_dir)

    def test_proge_and_pig(self):
        "Test the processor generator and the program image generator (with dictionary instruction compression)"

        # Generate .idf using the ImplementationSelector plugin
        (timeout, stdout, stderr, code) = \
             self.runWithTimeout(
            'explore -e ImplementationSelector -a %s -s1 test.dsdb' % \
            self.get_minimalADF(), 120)
        self.assertTrue('Best result configurations:' in stdout)
        self.assertTrue('2' in stdout)
        self.assertEquals(stderr.strip(), '')
        self.assertEquals(code, 0)

        # Dump the .idf a file.
        (timeout, stdout, stderr, code) = \
             self.runWithTimeout(
            'explore -w 2 test.dsdb', 120)
        self.assertEquals(stderr.strip(), '')
        self.assertEquals(code, 0)        
        self.assertTrue('Written ADF file of configuration 2' in stdout)
        self.assertTrue('Written IDF file of configuration 2' in stdout)      
        self.assertTrue(os.path.exists('2.adf'))
        self.assertTrue(os.path.exists('2.idf'))

        # Add a dummy test application.
        dummy_app_c = """
        volatile int input[100];
        volatile int output[100];
        int main() {
           int i = 0;
           for (; i < 100; ++i)
               input[i] = input[i] + output[i]*2;
           return 0;
        }
        """

        f = open('test.c', 'w+')
        f.write(dummy_app_c)
        f.close()

        # test.tpef
        (timeout, stdout, stderr, code) = \
             self.runWithTimeout(
            'tcecc -O0 test.c -a 2.adf -o test.tpef', 60*10)

        self.assertFalse(timeout)
        self.assertEquals(stdout, '')
        self.assertEquals(stderr, '')
        self.assert_(os.path.exists('test.tpef'))
        self.assertEquals(code, 0)        

        # generate VHDL for the processor
        (timeout, stdout, stderr, code) = \
             self.runWithTimeout(
            'generateprocessor -o proc_vhdl -i 2.idf 2.adf', 60*5)
        self.assertFalse(timeout)
        self.assertEquals(stdout, '')
        self.assertEquals(stderr, '')
        self.assert_(os.path.exists('proc_vhdl'))
        self.assertEquals(code, 0)

        self.assertEquals(len(glob.glob('proc_vhdl/vhdl/*.vhdl')), 7)

        # generate the program image
        (timeout, stdout, stderr, code) = \
             self.runWithTimeout(
            'generatebits -c InstructionDictionary.so -d -g -x proc_vhdl -p test.tpef 2.adf', 60*5)

        self.assertFalse(timeout)
        self.assertEquals(stdout, '')
        self.assertEquals(stderr, '')
        self.assertEquals(code, 0)        
        self.assertEquals('', stderr.strip())
        self.assert_(os.path.exists('proc_vhdl/vhdl/tta0_imem_mau_pkg.vhdl'))
        self.assert_(os.path.exists('test_data.img'))
        self.assert_(os.path.exists('test.img'))        
        # Probably due to Bug http://tce.cs.tut.fi/cgi-bin/tce-bugzilla/show_bug.cgi?id=114
        # this is nonempty even though we do not initialize any global data
        #self.assertEquals(os.path.getsize('test_data.img'), 0) # No global data defs
        self.assertTrue(os.path.getsize('test.img') > 0)
        self.assertEquals(len(open('test.img','r').readlines()[0].strip()), 6)
        self.assertTrue('IMEMMAUWIDTH : positive := 6;' in open('proc_vhdl/vhdl/tta0_imem_mau_pkg.vhdl', 'r').read())

opencl_example_kernel = \
r"""
__attribute__((reqd_work_group_size(4, 1, 1)))
kernel void
dot_product (global const float4 *a,
             global const float4 *b, 
             global float *c,
             local float *temp1) {

    __local float temp2[4];
    int lid = get_local_id(0);
    int gid = get_global_id(0);

    temp1[lid] = dot(a[gid], b[gid]);
    barrier(CLK_LOCAL_MEM_FENCE);

    temp2[3 - lid] = temp1[lid];
    barrier(CLK_LOCAL_MEM_FENCE);

    temp1[lid] = temp2[3 - lid];
    barrier(CLK_LOCAL_MEM_FENCE);

    c[gid] = temp1[lid];
} 
"""

opencl_example_host = \
r"""
#include <CL/cl.h>
#include <stdlib.h>
#include <stdio.h>

/* OpenCL API implementations end */

void
delete_memobjs(cl_mem *memobjs, int n)
{
    int i;
    for (i=0; i<n; i++)
        clReleaseMemObject(memobjs[i]);
}

int
exec_dot_product_kernel(const char *program_source,
                        int n, void *srcA, void *srcB, void *dst)
{
    cl_context context;

    cl_command_queue cmd_queue;
    cl_device_id *devices;
    cl_program program;
    cl_kernel kernel;
    cl_mem memobjs[3];
    size_t global_work_size[1];
    size_t local_work_size[1];
    size_t cb;
    cl_int err;
// create the OpenCL context on a GPU device
    context = clCreateContextFromType(NULL, CL_DEVICE_TYPE_GPU,
                                      NULL, NULL, NULL);
    if (context == (cl_context)0)
        return -1;
// get the list of GPU devices associated with context
    clGetContextInfo(context, CL_CONTEXT_DEVICES, 0, NULL, &cb);
    cb = 0;
    devices = (cl_device_id*)malloc(cb);
    clGetContextInfo(context, CL_CONTEXT_DEVICES, cb, devices, NULL);
// create a command-queue
    cmd_queue = clCreateCommandQueue(context, devices[0], 0, NULL);
    if (cmd_queue == (cl_command_queue)0)
    {
        clReleaseContext(context);
        return -2;
    }
    //free(devices);
// allocate the buffer memory objects
    memobjs[0] = clCreateBuffer(context,
                                CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR,
                                sizeof(cl_float4) * n, srcA, NULL);
    if (memobjs[0] == (cl_mem)0)
    {
        clReleaseCommandQueue(cmd_queue);
        clReleaseContext(context);
        return -3;
    }
    memobjs[1] = clCreateBuffer(context,
                                CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR,
                                sizeof(cl_float4) * n, srcB, NULL);
    if (memobjs[1] == (cl_mem)0)
    {
        delete_memobjs(memobjs, 1);
        clReleaseCommandQueue(cmd_queue);
        clReleaseContext(context);
        return -4;
    }

    memobjs[2] = clCreateBuffer(context,
                                CL_MEM_READ_WRITE,
                                sizeof(cl_float) * n, NULL, NULL);
    if (memobjs[2] == (cl_mem)0)
    {
        delete_memobjs(memobjs, 2);
        clReleaseCommandQueue(cmd_queue);
        clReleaseContext(context);
        return -5;
    }
// create the program
    program = clCreateProgramWithSource(context,
                                        1, (const char**)&program_source, NULL, NULL);
//     if (program == (cl_program)0)
//     {
//         delete_memobjs(memobjs, 3);
//         clReleaseCommandQueue(cmd_queue);
//         clReleaseContext(context);
//         return -6;
//     }
// build the program
    err = clBuildProgram(program, 0, NULL, NULL, NULL, NULL);
    if (err != CL_SUCCESS)
    {
        delete_memobjs(memobjs, 3);
        clReleaseProgram(program);
        clReleaseCommandQueue(cmd_queue);
        clReleaseContext(context);
        return -7;
    }
// create the kernel
    kernel = clCreateKernel(program, "dot_product", NULL);
    if (kernel == (cl_kernel)0)
    {
        delete_memobjs(memobjs, 3);
        clReleaseProgram(program);
        clReleaseCommandQueue(cmd_queue);
        clReleaseContext(context);
        return -8;
    }
// set the args values
    err = clSetKernelArg(kernel, 0,
                         sizeof(cl_mem), (void *) &memobjs[0]);
    err |= clSetKernelArg(kernel, 1,
                          sizeof(cl_mem), (void *) &memobjs[1]);
    err |= clSetKernelArg(kernel, 2,
                          sizeof(cl_mem), (void *) &memobjs[2]);

    // the local buffers
    err |= clSetKernelArg(kernel, 3, sizeof(cl_float)*4, NULL);

    if (err != CL_SUCCESS)
    {
        delete_memobjs(memobjs, 3);
        clReleaseKernel(kernel);
        clReleaseProgram(program);
        clReleaseCommandQueue(cmd_queue);
        clReleaseContext(context);
        return -9;
    }
// set work-item dimensions
    global_work_size[0] = n; /* n work groups with 4 work item per group */
    local_work_size[0] = 4; /* 4  work items per work group */
// execute kernel
    err = clEnqueueNDRangeKernel(cmd_queue, kernel, 1, NULL,
                                 global_work_size, local_work_size,
                                 0, NULL, NULL);

    if (err != CL_SUCCESS)
    {
        delete_memobjs(memobjs, 3);
        clReleaseKernel(kernel);
        clReleaseProgram(program);
        clReleaseCommandQueue(cmd_queue);
        clReleaseContext(context);
        return -10;
    }
// read output image
    err = clEnqueueReadBuffer(cmd_queue, memobjs[2], CL_TRUE,
                              0, n * sizeof(cl_float), dst,
                              0, NULL, NULL);
    if (err != CL_SUCCESS)
    {
        delete_memobjs(memobjs, 3);
        clReleaseKernel(kernel);
        clReleaseProgram(program);
        clReleaseCommandQueue(cmd_queue);
        clReleaseContext(context);
        return -11;
    }
// release kernel, program, and memory objects
    delete_memobjs(memobjs, 3);
    clReleaseKernel(kernel);
    clReleaseProgram(program);
    clReleaseCommandQueue(cmd_queue);
    clReleaseContext(context);
    return 0; // success...
}


#define TEST_SET_SIZE 16

volatile cl_float4 inputA[TEST_SET_SIZE];
volatile cl_float4 inputB[TEST_SET_SIZE];
volatile cl_float results[TEST_SET_SIZE];

/* TODO: global constructor call injection breaks
   in case main is inlined as the context is not 
   saved before calling it at the moment and inlining
   brings in live variables. FIXME by doing the calls
   at LLVM Instruction level after which proper
   context saving code will be generated automatically. */
__attribute__((noinline))
int main() {  

    for (int i = 0; i < TEST_SET_SIZE; ++i) {
        inputA[i].s[0] = i;
        inputA[i].s[1] = i;
        inputA[i].s[2] = i;
        inputA[i].s[3] = i;

        inputB[i].s[0] = 1;
        inputB[i].s[1] = 2;
        inputB[i].s[2] = 3;
        inputB[i].s[3] = 4;
    }

    int retVal = exec_dot_product_kernel(
        NULL, TEST_SET_SIZE, (void*)inputA, 
        (void*)inputB, (void*)results);

#ifdef DEBUG
    if (retVal != 0)
        printf("ERROR: %d\\n", retVal);
#endif

    /* verify results */

    int broken = 0;
    for (int i = 0; i < TEST_SET_SIZE; ++i) {

        cl_float expected = 
            inputA[i].s[0]*inputB[i].s[0] +
            inputA[i].s[1]*inputB[i].s[1] +
            inputA[i].s[2]*inputB[i].s[2] +
            inputA[i].s[3]*inputB[i].s[3];

        if (results[i] != expected) ++broken;
    }
    if (broken == 0) 
        puts("OK"); 
    else 
        puts("NOK");
    return retVal;
}
"""

if __name__ == '__main__':
    print "Testing TCE installation, this can take up to two hours."
    print "Time to go for a lunch? Use -v to see the progress."
    unittest.main()
