Index: include/llvm/Support/MachineValueType.h
===================================================================
--- include/llvm/Support/MachineValueType.h	(revision 309105)
+++ include/llvm/Support/MachineValueType.h	(working copy)
@@ -64,81 +64,83 @@
       v16i1          =  18,   //   16 x i1
       v32i1          =  19,   //   32 x i1
       v64i1          =  20,   //   64 x i1
       v128i1         =  21,   //  128 x i1
-      v512i1         =  22,   //  512 x i1
-      v1024i1        =  23,   // 1024 x i1
+      v256i1         =  22,   //  256 x i1
+      v512i1         =  23,   //  512 x i1
+      v1024i1        =  24,   // 1024 x i1
+      v2048i1        =  25,   // 2048 x i1
 
-      v1i8           =  24,   //  1 x i8
-      v2i8           =  25,   //  2 x i8
-      v4i8           =  26,   //  4 x i8
-      v8i8           =  27,   //  8 x i8
-      v16i8          =  28,   // 16 x i8
-      v32i8          =  29,   // 32 x i8
-      v64i8          =  30,   // 64 x i8
-      v128i8         =  31,   //128 x i8
-      v256i8         =  32,   //256 x i8
+      v1i8           =  26,   //  1 x i8
+      v2i8           =  27,   //  2 x i8
+      v4i8           =  28,   //  4 x i8
+      v8i8           =  29,   //  8 x i8
+      v16i8          =  30,   // 16 x i8
+      v32i8          =  31,   // 32 x i8
+      v64i8          =  32,   // 64 x i8
+      v128i8         =  33,   //128 x i8
+      v256i8         =  34,   //256 x i8
 
-      v1i16          =  33,   //  1 x i16
-      v2i16          =  34,   //  2 x i16
-      v4i16          =  35,   //  4 x i16
-      v8i16          =  36,   //  8 x i16
-      v16i16         =  37,   // 16 x i16
-      v32i16         =  38,   // 32 x i16
-      v64i16         =  39,   // 64 x i16
-      v128i16        =  40,   //128 x i16
+      v1i16          =  35,   //  1 x i16
+      v2i16          =  36,   //  2 x i16
+      v4i16          =  37,   //  4 x i16
+      v8i16          =  38,   //  8 x i16
+      v16i16         =  39,   // 16 x i16
+      v32i16         =  40,   // 32 x i16
+      v64i16         =  41,   // 64 x i16
+      v128i16        =  42,   //128 x i16
 
-      v1i32          =  41,   //  1 x i32
-      v2i32          =  42,   //  2 x i32
-      v4i32          =  43,   //  4 x i32
-      v8i32          =  44,   //  8 x i32
-      v16i32         =  45,   // 16 x i32
-      v32i32         =  46,   // 32 x i32
-      v64i32         =  47,   // 64 x i32
+      v1i32          =  43,   //  1 x i32
+      v2i32          =  44,   //  2 x i32
+      v4i32          =  45,   //  4 x i32
+      v8i32          =  46,   //  8 x i32
+      v16i32         =  47,   // 16 x i32
+      v32i32         =  48,   // 32 x i32
+      v64i32         =  49,   // 64 x i32
 
-      v1i64          =  48,   //  1 x i64
-      v2i64          =  49,   //  2 x i64
-      v4i64          =  50,   //  4 x i64
-      v8i64          =  51,   //  8 x i64
-      v16i64         =  52,   // 16 x i64
-      v32i64         =  53,   // 32 x i64
+      v1i64          =  50,   //  1 x i64
+      v2i64          =  51,   //  2 x i64
+      v4i64          =  52,   //  4 x i64
+      v8i64          =  53,   //  8 x i64
+      v16i64         =  54,   // 16 x i64
+      v32i64         =  55,   // 32 x i64
 
-      v1i128         =  54,   //  1 x i128
+      v1i128         =  56,   //  1 x i128
 
       // Scalable integer types
-      nxv1i1         =  55,   // n x  1 x i1
-      nxv2i1         =  56,   // n x  2 x i1
-      nxv4i1         =  57,   // n x  4 x i1
-      nxv8i1         =  58,   // n x  8 x i1
-      nxv16i1        =  59,   // n x 16 x i1
-      nxv32i1        =  60,   // n x 32 x i1
+      nxv1i1         =  57,   // n x  1 x i1
+      nxv2i1         =  58,   // n x  2 x i1
+      nxv4i1         =  59,   // n x  4 x i1
+      nxv8i1         =  60,   // n x  8 x i1
+      nxv16i1        =  61,   // n x 16 x i1
+      nxv32i1        =  62,   // n x 32 x i1
 
-      nxv1i8         =  61,   // n x  1 x i8
-      nxv2i8         =  62,   // n x  2 x i8
-      nxv4i8         =  63,   // n x  4 x i8
-      nxv8i8         =  64,   // n x  8 x i8
-      nxv16i8        =  65,   // n x 16 x i8
-      nxv32i8        =  66,   // n x 32 x i8
+      nxv1i8         =  63,   // n x  1 x i8
+      nxv2i8         =  64,   // n x  2 x i8
+      nxv4i8         =  65,   // n x  4 x i8
+      nxv8i8         =  66,   // n x  8 x i8
+      nxv16i8        =  67,   // n x 16 x i8
+      nxv32i8        =  68,   // n x 32 x i8
 
-      nxv1i16        =  67,   // n x  1 x i16
-      nxv2i16        =  68,   // n x  2 x i16
-      nxv4i16        =  69,   // n x  4 x i16
-      nxv8i16        =  70,   // n x  8 x i16
-      nxv16i16       =  71,   // n x 16 x i16
-      nxv32i16       =  72,   // n x 32 x i16
+      nxv1i16        =  69,   // n x  1 x i16
+      nxv2i16        =  70,   // n x  2 x i16
+      nxv4i16        =  71,   // n x  4 x i16
+      nxv8i16        =  72,   // n x  8 x i16
+      nxv16i16       =  73,   // n x 16 x i16
+      nxv32i16       =  74,   // n x 32 x i16
 
-      nxv1i32        =  73,   // n x  1 x i32
-      nxv2i32        =  74,   // n x  2 x i32
-      nxv4i32        =  75,   // n x  4 x i32
-      nxv8i32        =  76,   // n x  8 x i32
-      nxv16i32       =  77,   // n x 16 x i32
-      nxv32i32       =  78,   // n x 32 x i32
+      nxv1i32        =  75,   // n x  1 x i32
+      nxv2i32        =  76,   // n x  2 x i32
+      nxv4i32        =  77,   // n x  4 x i32
+      nxv8i32        =  78,   // n x  8 x i32
+      nxv16i32       =  79,   // n x 16 x i32
+      nxv32i32       =  80,   // n x 32 x i32
 
-      nxv1i64        =  79,   // n x  1 x i64
-      nxv2i64        =  80,   // n x  2 x i64
-      nxv4i64        =  81,   // n x  4 x i64
-      nxv8i64        =  82,   // n x  8 x i64
-      nxv16i64       =  83,   // n x 16 x i64
-      nxv32i64       =  84,   // n x 32 x i64
+      nxv1i64        =  81,   // n x  1 x i64
+      nxv2i64        =  82,   // n x  2 x i64
+      nxv4i64        =  83,   // n x  4 x i64
+      nxv8i64        =  84,   // n x  8 x i64
+      nxv16i64       =  85,   // n x 16 x i64
+      nxv32i64       =  86,   // n x 32 x i64
 
       FIRST_INTEGER_VECTOR_VALUETYPE = v1i1,
       LAST_INTEGER_VECTOR_VALUETYPE = nxv32i64,
@@ -145,31 +148,35 @@
       FIRST_INTEGER_SCALABLE_VALUETYPE = nxv1i1,
       LAST_INTEGER_SCALABLE_VALUETYPE = nxv32i64,
 
-      v2f16          =  85,   //  2 x f16
-      v4f16          =  86,   //  4 x f16
-      v8f16          =  87,   //  8 x f16
-      v1f32          =  88,   //  1 x f32
-      v2f32          =  89,   //  2 x f32
-      v4f32          =  90,   //  4 x f32
-      v8f32          =  91,   //  8 x f32
-      v16f32         =  92,   // 16 x f32
-      v1f64          =  93,   //  1 x f64
-      v2f64          =  94,   //  2 x f64
-      v4f64          =  95,   //  4 x f64
-      v8f64          =  96,   //  8 x f64
+      v2f16          =  87,   //  2 x f16
+      v4f16          =  88,   //  4 x f16
+      v8f16          =  89,   //  8 x f16
+      v16f16         =  90,   // 16 x f16
+      v32f16         =  91,   // 32 x f16
+      v64f16         =  92,   // 64 x f16
+      v1f32          =  93,   //  1 x f32
+      v2f32          =  94,   //  2 x f32
+      v4f32          =  95,   //  4 x f32
+      v8f32          =  96,   //  8 x f32
+      v16f32         =  97,   // 16 x f32
+      v32f32         =  98,   // 32 x f32
+      v1f64          =  99,   //  1 x f64
+      v2f64          = 100,   //  2 x f64
+      v4f64          = 101,   //  4 x f64
+      v8f64          = 102,   //  8 x f64
 
-      nxv2f16        =  97,   // n x  2 x f16
-      nxv4f16        =  98,   // n x  4 x f16
-      nxv8f16        =  99,   // n x  8 x f16
-      nxv1f32        = 100,   // n x  1 x f32
-      nxv2f32        = 101,   // n x  2 x f32
-      nxv4f32        = 102,   // n x  4 x f32
-      nxv8f32        = 103,   // n x  8 x f32
-      nxv16f32       = 104,   // n x 16 x f32
-      nxv1f64        = 105,   // n x  1 x f64
-      nxv2f64        = 106,   // n x  2 x f64
-      nxv4f64        = 107,   // n x  4 x f64
-      nxv8f64        = 108,   // n x  8 x f64
+      nxv2f16        = 103,   // n x  2 x f16
+      nxv4f16        = 104,   // n x  4 x f16
+      nxv8f16        = 105,   // n x  8 x f16
+      nxv1f32        = 106,   // n x  1 x f32
+      nxv2f32        = 107,   // n x  2 x f32
+      nxv4f32        = 108,   // n x  4 x f32
+      nxv8f32        = 109,   // n x  8 x f32
+      nxv16f32       = 110,   // n x 16 x f32
+      nxv1f64        = 111,   // n x  1 x f64
+      nxv2f64        = 112,   // n x  2 x f64
+      nxv4f64        = 113,   // n x  4 x f64
+      nxv8f64        = 114,   // n x  8 x f64
 
       FIRST_FP_VECTOR_VALUETYPE = v2f16,
       LAST_FP_VECTOR_VALUETYPE = nxv8f64,
@@ -180,20 +187,20 @@
       FIRST_VECTOR_VALUETYPE = v1i1,
       LAST_VECTOR_VALUETYPE  = nxv8f64,
 
-      x86mmx         =  109,   // This is an X86 MMX value
+      x86mmx         =  115,   // This is an X86 MMX value
 
-      Glue           =  110,   // This glues nodes together during pre-RA sched
+      Glue           =  116,   // This glues nodes together during pre-RA sched
 
-      isVoid         =  111,   // This has no value
+      isVoid         =  117,   // This has no value
 
-      Untyped        =  112,   // This value takes a register, but has
+      Untyped        =  118,   // This value takes a register, but has
                                // unspecified type.  The register class
                                // will be determined by the opcode.
 
-      ExceptRef      = 113,    // WebAssembly's except_ref type
+      ExceptRef      = 119,    // WebAssembly's except_ref type
 
       FIRST_VALUETYPE = 1,     // This is always the beginning of the list.
-      LAST_VALUETYPE =  114,   // This always remains at the end of the list.
+      LAST_VALUETYPE =  120,   // This always remains at the end of the list.
 
       // This is the current maximum for LAST_VALUETYPE.
       // MVT::MAX_ALLOWED_VALUETYPE is used for asserts and to size bit vectors
@@ -373,10 +381,10 @@
     bool is1024BitVector() const {
       return (SimpleTy == MVT::v1024i1 || SimpleTy == MVT::v128i8 ||
               SimpleTy == MVT::v64i16  || SimpleTy == MVT::v32i32 ||
-              SimpleTy == MVT::v16i64);
+              SimpleTy == MVT::v16i64  || SimpleTy == MVT::v32f32);
     }
 
     /// Return true if this is a 2048-bit vector type.
     bool is2048BitVector() const {
       return (SimpleTy == MVT::v256i8 || SimpleTy == MVT::v128i16 ||
               SimpleTy == MVT::v64i32 || SimpleTy == MVT::v32i64);
@@ -422,9 +430,11 @@
       case v16i1:
       case v32i1:
       case v64i1:
       case v128i1:
+      case v256i1:
       case v512i1:
       case v1024i1:
+      case v2048i1:
       case nxv1i1:
       case nxv2i1:
       case nxv4i1:
@@ -488,6 +499,9 @@
       case v2f16:
       case v4f16:
       case v8f16:
+      case v16f16:
+      case v32f16:
+      case v64f16:
       case nxv2f16:
       case nxv4f16:
       case nxv8f16: return f16;
@@ -496,6 +510,7 @@
       case v4f32:
       case v8f32:
       case v16f32:
+      case v32f32:
       case nxv1f32:
       case nxv2f32:
       case nxv4f32:
@@ -517,20 +532,25 @@
       default:
         llvm_unreachable("Not a vector MVT!");
       case v1024i1: return 1024;
+      case v2048i1: return 2048;
       case v512i1: return 512;
+      case v256i1:
       case v256i8: return 256;
       case v128i1:
       case v128i8:
       case v128i16: return 128;
       case v64i1:
       case v64i8:
       case v64i16:
-      case v64i32: return 64;
+      case v64i32:
+      case v64f16: return 64;
       case v32i1:
       case v32i8:
       case v32i16:
       case v32i32:
       case v32i64:
+      case v32f16:
+      case v32f32:
       case nxv32i1:
       case nxv32i8:
       case nxv32i16:
@@ -541,6 +562,7 @@
       case v16i32:
       case v16i64:
       case v16f32:
+      case v16f16:
       case nxv16i1:
       case nxv16i8:
       case nxv16i16:
@@ -707,10 +730,12 @@
       case nxv8f16:
       case nxv4f32:
       case nxv2f64: return 128;
+      case v256i1:
       case v32i8:
       case v16i16:
       case v8i32:
       case v4i64:
+      case v16f16:
       case v8f32:
       case v4f64:
       case nxv32i8:
@@ -725,6 +750,7 @@
       case v16i32:
       case v8i64:
       case v16f32:
+      case v32f16:
       case v8f64:
       case nxv32i16:
       case nxv16i32:
@@ -736,8 +762,11 @@
       case v64i16:
       case v32i32:
       case v16i64:
+      case v64f16:
+      case v32f32:
       case nxv32i32:
       case nxv16i64: return 1024;
+      case v2048i1:
       case v256i8:
       case v128i16:
       case v64i32:
@@ -830,9 +859,11 @@
         if (NumElements == 16)   return MVT::v16i1;
         if (NumElements == 32)   return MVT::v32i1;
         if (NumElements == 64)   return MVT::v64i1;
         if (NumElements == 128)  return MVT::v128i1;
+        if (NumElements == 256)  return MVT::v256i1;
         if (NumElements == 512)  return MVT::v512i1;
         if (NumElements == 1024) return MVT::v1024i1;
+        if (NumElements == 2048) return MVT::v2048i1;
         break;
       case MVT::i8:
         if (NumElements == 1)   return MVT::v1i8;
@@ -878,6 +910,9 @@
         if (NumElements == 2)  return MVT::v2f16;
         if (NumElements == 4)  return MVT::v4f16;
         if (NumElements == 8)  return MVT::v8f16;
+        if (NumElements == 16) return MVT::v16f16;
+        if (NumElements == 32) return MVT::v32f16;
+        if (NumElements == 64) return MVT::v64f16;
         break;
       case MVT::f32:
         if (NumElements == 1)  return MVT::v1f32;
@@ -885,6 +920,7 @@
         if (NumElements == 4)  return MVT::v4f32;
         if (NumElements == 8)  return MVT::v8f32;
         if (NumElements == 16) return MVT::v16f32;
+        if (NumElements == 32) return MVT::v32f32;
         break;
       case MVT::f64:
         if (NumElements == 1)  return MVT::v1f64;
Index: include/llvm/CodeGen/ValueTypes.td
===================================================================
--- include/llvm/CodeGen/ValueTypes.td	(revision 309105)
+++ include/llvm/CodeGen/ValueTypes.td	(working copy)
@@ -40,112 +40,118 @@
 def v16i1  : ValueType<16,  18>;   //  16 x i1 vector value
 def v32i1  : ValueType<32 , 19>;   //  32 x i1 vector value
 def v64i1  : ValueType<64 , 20>;   //  64 x i1 vector value
 def v128i1 : ValueType<128, 21>;   // 128 x i1 vector value
-def v512i1 : ValueType<512, 22>;   // 512 x i1 vector value
-def v1024i1: ValueType<1024,23>;   //1024 x i1 vector value
+def v256i1 : ValueType<256, 22>;   // 256 x i1 vector value
+def v512i1 : ValueType<512, 23>;   // 512 x i1 vector value
+def v1024i1: ValueType<1024,24>;   //1024 x i1 vector value
+def v2048i1: ValueType<2048,25>;   //2048 x i1 vector value
 
-def v1i8   : ValueType<8,   24>;   //  1 x i8  vector value
-def v2i8   : ValueType<16 , 25>;   //  2 x i8  vector value
-def v4i8   : ValueType<32 , 26>;   //  4 x i8  vector value
-def v8i8   : ValueType<64 , 27>;   //  8 x i8  vector value
-def v16i8  : ValueType<128, 28>;   // 16 x i8  vector value
-def v32i8  : ValueType<256, 29>;   // 32 x i8  vector value
-def v64i8  : ValueType<512, 30>;   // 64 x i8  vector value
-def v128i8 : ValueType<1024,31>;   //128 x i8  vector value
-def v256i8 : ValueType<2048,32>;   //256 x i8  vector value
+def v1i8   : ValueType<8,  26>;   //  1 x i8  vector value
+def v2i8   : ValueType<16 , 27>;   //  2 x i8  vector value
+def v4i8   : ValueType<32 , 28>;   //  4 x i8  vector value
+def v8i8   : ValueType<64 , 29>;   //  8 x i8  vector value
+def v16i8  : ValueType<128, 30>;   // 16 x i8  vector value
+def v32i8  : ValueType<256, 31>;   // 32 x i8  vector value
+def v64i8  : ValueType<512, 32>;   // 64 x i8  vector value
+def v128i8 : ValueType<1024,33>;   //128 x i8  vector value
+def v256i8 : ValueType<2048,34>;   //256 x i8  vector value
 
-def v1i16  : ValueType<16 , 33>;   //  1 x i16 vector value
-def v2i16  : ValueType<32 , 34>;   //  2 x i16 vector value
-def v4i16  : ValueType<64 , 35>;   //  4 x i16 vector value
-def v8i16  : ValueType<128, 36>;   //  8 x i16 vector value
-def v16i16 : ValueType<256, 37>;   // 16 x i16 vector value
-def v32i16 : ValueType<512, 38>;   // 32 x i16 vector value
-def v64i16 : ValueType<1024,39>;   // 64 x i16 vector value
-def v128i16: ValueType<2048,40>;   //128 x i16 vector value
+def v1i16  : ValueType<16 , 35>;   //  1 x i16 vector value
+def v2i16  : ValueType<32 , 36>;   //  2 x i16 vector value
+def v4i16  : ValueType<64 , 37>;   //  4 x i16 vector value
+def v8i16  : ValueType<128, 38>;   //  8 x i16 vector value
+def v16i16 : ValueType<256, 39>;   // 16 x i16 vector value
+def v32i16 : ValueType<512, 40>;   // 32 x i16 vector value
+def v64i16 : ValueType<1024,41>;   // 64 x i16 vector value
+def v128i16: ValueType<2048,42>;   //128 x i16 vector value
 
-def v1i32  : ValueType<32 , 41>;   //  1 x i32 vector value
-def v2i32  : ValueType<64 , 42>;   //  2 x i32 vector value
-def v4i32  : ValueType<128, 43>;   //  4 x i32 vector value
-def v8i32  : ValueType<256, 44>;   //  8 x i32 vector value
-def v16i32 : ValueType<512, 45>;   // 16 x i32 vector value
-def v32i32 : ValueType<1024,46>;   // 32 x i32 vector value
-def v64i32 : ValueType<2048,47>;   // 64 x i32 vector value
+def v1i32  : ValueType<32 , 43>;   //  1 x i32 vector value
+def v2i32  : ValueType<64 , 44>;   //  2 x i32 vector value
+def v4i32  : ValueType<128, 45>;   //  4 x i32 vector value
+def v8i32  : ValueType<256, 46>;   //  8 x i32 vector value
+def v16i32 : ValueType<512, 47>;   // 16 x i32 vector value
+def v32i32 : ValueType<1024,48>;   // 32 x i32 vector value
+def v64i32 : ValueType<2048,49>;   // 64 x i32 vector value
 
-def v1i64  : ValueType<64 , 48>;   //  1 x i64 vector value
-def v2i64  : ValueType<128, 49>;   //  2 x i64 vector value
-def v4i64  : ValueType<256, 50>;   //  4 x i64 vector value
-def v8i64  : ValueType<512, 51>;   //  8 x i64 vector value
-def v16i64 : ValueType<1024,52>;   // 16 x i64 vector value
-def v32i64 : ValueType<2048,53>;   // 32 x i64 vector value
+def v1i64  : ValueType<64 , 50>;   //  1 x i64 vector value
+def v2i64  : ValueType<128, 51>;   //  2 x i64 vector value
+def v4i64  : ValueType<256, 52>;   //  4 x i64 vector value
+def v8i64  : ValueType<512, 53>;   //  8 x i64 vector value
+def v16i64 : ValueType<1024,54>;   // 16 x i64 vector value
+def v32i64 : ValueType<2048,55>;   // 32 x i64 vector value
 
-def v1i128 : ValueType<128, 54>;   //  1 x i128 vector value
+def v1i128 : ValueType<128, 56>;   //  1 x i128 vector value
 
-def nxv1i1  : ValueType<1,   55>;  // n x  1 x i1  vector value
-def nxv2i1  : ValueType<2,   56>;  // n x  2 x i1  vector value
-def nxv4i1  : ValueType<4,   57>;  // n x  4 x i1  vector value
-def nxv8i1  : ValueType<8,   58>;  // n x  8 x i1  vector value
-def nxv16i1 : ValueType<16,  59>;  // n x 16 x i1  vector value
-def nxv32i1 : ValueType<32,  60>;  // n x 32 x i1  vector value
+def nxv1i1  : ValueType<1,   57>;  // n x  1 x i1  vector value
+def nxv2i1  : ValueType<2,   58>;  // n x  2 x i1  vector value
+def nxv4i1  : ValueType<4,   59>;  // n x  4 x i1  vector value
+def nxv8i1  : ValueType<8,   60>;  // n x  8 x i1  vector value
+def nxv16i1 : ValueType<16,  61>;  // n x 16 x i1  vector value
+def nxv32i1 : ValueType<32,  62>;  // n x 32 x i1  vector value
 
-def nxv1i8  : ValueType<8,   61>;  // n x  1 x i8  vector value
-def nxv2i8  : ValueType<16,  62>;  // n x  2 x i8  vector value
-def nxv4i8  : ValueType<32,  63>;  // n x  4 x i8  vector value
-def nxv8i8  : ValueType<64,  64>;  // n x  8 x i8  vector value
-def nxv16i8 : ValueType<128, 65>;  // n x 16 x i8  vector value
-def nxv32i8 : ValueType<256, 66>;  // n x 32 x i8  vector value
+def nxv1i8  : ValueType<8,   63>;  // n x  1 x i8  vector value
+def nxv2i8  : ValueType<16,  64>;  // n x  2 x i8  vector value
+def nxv4i8  : ValueType<32,  65>;  // n x  4 x i8  vector value
+def nxv8i8  : ValueType<64,  66>;  // n x  8 x i8  vector value
+def nxv16i8 : ValueType<128, 67>;  // n x 16 x i8  vector value
+def nxv32i8 : ValueType<256, 68>;  // n x 32 x i8  vector value
 
-def nxv1i16 : ValueType<16,  67>;  // n x  1 x i16 vector value
-def nxv2i16 : ValueType<32,  68>;  // n x  2 x i16 vector value
-def nxv4i16 : ValueType<64,  69>;  // n x  4 x i16 vector value
-def nxv8i16 : ValueType<128, 70>;  // n x  8 x i16 vector value
-def nxv16i16: ValueType<256, 71>;  // n x 16 x i16 vector value
-def nxv32i16: ValueType<512, 72>;  // n x 32 x i16 vector value
+def nxv1i16 : ValueType<16,  69>;  // n x  1 x i16 vector value
+def nxv2i16 : ValueType<32,  70>;  // n x  2 x i16 vector value
+def nxv4i16 : ValueType<64,  71>;  // n x  4 x i16 vector value
+def nxv8i16 : ValueType<128, 72>;  // n x  8 x i16 vector value
+def nxv16i16: ValueType<256, 73>;  // n x 16 x i16 vector value
+def nxv32i16: ValueType<512, 74>;  // n x 32 x i16 vector value
 
-def nxv1i32 : ValueType<32,  73>;  // n x  1 x i32 vector value
-def nxv2i32 : ValueType<64,  74>;  // n x  2 x i32 vector value
-def nxv4i32 : ValueType<128, 75>;  // n x  4 x i32 vector value
-def nxv8i32 : ValueType<256, 76>;  // n x  8 x i32 vector value
-def nxv16i32: ValueType<512, 77>;  // n x 16 x i32 vector value
-def nxv32i32: ValueType<1024,78>;  // n x 32 x i32 vector value
+def nxv1i32 : ValueType<32,  75>;  // n x  1 x i32 vector value
+def nxv2i32 : ValueType<64,  76>;  // n x  2 x i32 vector value
+def nxv4i32 : ValueType<128, 77>;  // n x  4 x i32 vector value
+def nxv8i32 : ValueType<256, 78>;  // n x  8 x i32 vector value
+def nxv16i32: ValueType<512, 79>;  // n x 16 x i32 vector value
+def nxv32i32: ValueType<1024,80>;  // n x 32 x i32 vector value
 
-def nxv1i64 : ValueType<64,  79>;  // n x  1 x i64 vector value
-def nxv2i64 : ValueType<128, 80>;  // n x  2 x i64 vector value
-def nxv4i64 : ValueType<256, 81>;  // n x  4 x i64 vector value
-def nxv8i64 : ValueType<512, 82>;  // n x  8 x i64 vector value
-def nxv16i64: ValueType<1024,83>;  // n x 16 x i64 vector value
-def nxv32i64: ValueType<2048,84>;  // n x 32 x i64 vector value
+def nxv1i64 : ValueType<64,  81>;  // n x  1 x i64 vector value
+def nxv2i64 : ValueType<128, 82>;  // n x  2 x i64 vector value
+def nxv4i64 : ValueType<256, 83>;  // n x  4 x i64 vector value
+def nxv8i64 : ValueType<512, 84>;  // n x  8 x i64 vector value
+def nxv16i64: ValueType<1024,85>;  // n x 16 x i64 vector value
+def nxv32i64: ValueType<2048,86>;  // n x 32 x i64 vector value
 
-def v2f16  : ValueType<32 , 85>;   //  2 x f16 vector value
-def v4f16  : ValueType<64 , 86>;   //  4 x f16 vector value
-def v8f16  : ValueType<128, 87>;   //  8 x f16 vector value
-def v1f32  : ValueType<32 , 88>;   //  1 x f32 vector value
-def v2f32  : ValueType<64 , 89>;   //  2 x f32 vector value
-def v4f32  : ValueType<128, 90>;   //  4 x f32 vector value
-def v8f32  : ValueType<256, 91>;   //  8 x f32 vector value
-def v16f32 : ValueType<512, 92>;   // 16 x f32 vector value
-def v1f64  : ValueType<64,  93>;   //  1 x f64 vector value
-def v2f64  : ValueType<128, 94>;   //  2 x f64 vector value
-def v4f64  : ValueType<256, 95>;   //  4 x f64 vector value
-def v8f64  : ValueType<512, 96>;   //  8 x f64 vector value
+def v2f16  : ValueType<32 , 87>;   //  2 x f16 vector value
+def v4f16  : ValueType<64 , 88>;   //  4 x f16 vector value
+def v8f16  : ValueType<128, 89>;   //  8 x f16 vector value
+def v16f16 : ValueType<256, 90>;   // 16 x f16 vector value
+def v32f16 : ValueType<512, 91>;   // 32 x f16 vector value
+def v64f16 : ValueType<1024,92>;   // 64 x f16 vector value
+def v1f32  : ValueType<32 , 93>;   //  1 x f32 vector value
+def v2f32  : ValueType<64 , 94>;   //  2 x f32 vector value
+def v4f32  : ValueType<128, 95>;   //  4 x f32 vector value
+def v8f32  : ValueType<256, 96>;   //  8 x f32 vector value
+def v16f32 : ValueType<512, 97>;   // 16 x f32 vector value
+def v32f32 : ValueType<1024,98>;   // 32 x f32 vector value
+def v1f64  : ValueType<64,  99>;   //  1 x f64 vector value
+def v2f64  : ValueType<128, 100>;   //  2 x f64 vector value
+def v4f64  : ValueType<256, 101>;   //  4 x f64 vector value
+def v8f64  : ValueType<512, 102>;   //  8 x f64 vector value
 
-def nxv2f16  : ValueType<32 ,  97>; // n x  2 x f16 vector value
-def nxv4f16  : ValueType<64 ,  98>; // n x  4 x f16 vector value
-def nxv8f16  : ValueType<128,  99>; // n x  8 x f16 vector value
-def nxv1f32  : ValueType<32 , 100>; // n x  1 x f32 vector value
-def nxv2f32  : ValueType<64 , 101>; // n x  2 x f32 vector value
-def nxv4f32  : ValueType<128, 102>; // n x  4 x f32 vector value
-def nxv8f32  : ValueType<256, 103>; // n x  8 x f32 vector value
-def nxv16f32 : ValueType<512, 104>; // n x 16 x f32 vector value
-def nxv1f64  : ValueType<64,  105>; // n x  1 x f64 vector value
-def nxv2f64  : ValueType<128, 106>; // n x  2 x f64 vector value
-def nxv4f64  : ValueType<256, 107>; // n x  4 x f64 vector value
-def nxv8f64  : ValueType<512, 108>; // n x  8 x f64 vector value
+def nxv2f16  : ValueType<32 , 103>; // n x  2 x f16 vector value
+def nxv4f16  : ValueType<64 , 104>; // n x  4 x f16 vector value
+def nxv8f16  : ValueType<128, 105>; // n x  8 x f16 vector value
+def nxv1f32  : ValueType<32 , 106>; // n x  1 x f32 vector value
+def nxv2f32  : ValueType<64 , 107>; // n x  2 x f32 vector value
+def nxv4f32  : ValueType<128, 108>; // n x  4 x f32 vector value
+def nxv8f32  : ValueType<256, 109>; // n x  8 x f32 vector value
+def nxv16f32 : ValueType<512, 110>; // n x 16 x f32 vector value
+def nxv1f64  : ValueType<64,  111>; // n x  1 x f64 vector value
+def nxv2f64  : ValueType<128, 112>; // n x  2 x f64 vector value
+def nxv4f64  : ValueType<256, 113>; // n x  4 x f64 vector value
+def nxv8f64  : ValueType<512, 114>; // n x  8 x f64 vector value
 
-def x86mmx : ValueType<64 , 109>;   // X86 MMX value
-def FlagVT : ValueType<0  , 110>;   // Pre-RA sched glue
-def isVoid : ValueType<0  , 111>;   // Produces no value
-def untyped: ValueType<8  , 112>;   // Produces an untyped value
-def ExceptRef: ValueType<0, 113>;   // WebAssembly's except_ref type
+def x86mmx : ValueType<64 , 115>;   // X86 MMX value
+def FlagVT : ValueType<0  , 116>;   // Pre-RA sched glue
+def isVoid : ValueType<0  , 117>;   // Produces no value
+def untyped: ValueType<8  , 118>;   // Produces an untyped value
+def ExceptRef: ValueType<0, 119>;   // WebAssembly's except_ref type
 def token  : ValueType<0  , 248>;   // TokenTy
 def MetadataVT: ValueType<0, 249>;  // Metadata
 
Index: include/llvm/IR/Intrinsics.td
===================================================================
--- include/llvm/IR/Intrinsics.td	(revision 309105)
+++ include/llvm/IR/Intrinsics.td	(working copy)
@@ -194,8 +194,11 @@
 def llvm_v16i1_ty      : LLVMType<v16i1>;    //  16 x i1
 def llvm_v32i1_ty      : LLVMType<v32i1>;    //  32 x i1
 def llvm_v64i1_ty      : LLVMType<v64i1>;    //  64 x i1
+def llvm_v128i1_ty     : LLVMType<v128i1>;   // 128 x i1
+def llvm_v256i1_ty     : LLVMType<v256i1>;   // 256 x i1
 def llvm_v512i1_ty     : LLVMType<v512i1>;   // 512 x i1
 def llvm_v1024i1_ty    : LLVMType<v1024i1>;  //1024 x i1
+def llvm_v2048i1_ty    : LLVMType<v2048i1>;  //2048 x i1
 
 def llvm_v1i8_ty       : LLVMType<v1i8>;     //  1 x i8
 def llvm_v2i8_ty       : LLVMType<v2i8>;     //  2 x i8
@@ -236,11 +239,15 @@
 def llvm_v2f16_ty      : LLVMType<v2f16>;    //  2 x half (__fp16)
 def llvm_v4f16_ty      : LLVMType<v4f16>;    //  4 x half (__fp16)
 def llvm_v8f16_ty      : LLVMType<v8f16>;    //  8 x half (__fp16)
+def llvm_v16f16_ty     : LLVMType<v16f16>;   //  16 x half (__fp16)
+def llvm_v32f16_ty     : LLVMType<v32f16>;   //  32 x half (__fp16)
+def llvm_v64f16_ty     : LLVMType<v64f16>;   //  64 x half (__fp16)
 def llvm_v1f32_ty      : LLVMType<v1f32>;    //  1 x float
 def llvm_v2f32_ty      : LLVMType<v2f32>;    //  2 x float
 def llvm_v4f32_ty      : LLVMType<v4f32>;    //  4 x float
 def llvm_v8f32_ty      : LLVMType<v8f32>;    //  8 x float
 def llvm_v16f32_ty     : LLVMType<v16f32>;   // 16 x float
+def llvm_v32f32_ty     : LLVMType<v32f32>;   // 32 x float
 def llvm_v1f64_ty      : LLVMType<v1f64>;    //  1 x double
 def llvm_v2f64_ty      : LLVMType<v2f64>;    //  2 x double
 def llvm_v4f64_ty      : LLVMType<v4f64>;    //  4 x double
Index: lib/IR/ValueTypes.cpp
===================================================================
--- lib/CodeGen/ValueTypes.cpp	(revision 309105)
+++ lib/CodeGen/ValueTypes.cpp	(working copy)
@@ -149,9 +149,11 @@
   case MVT::v16i1:   return "v16i1";
   case MVT::v32i1:   return "v32i1";
   case MVT::v64i1:   return "v64i1";
   case MVT::v128i1:  return "v128i1";
+  case MVT::v256i1:  return "v256i1";
   case MVT::v512i1:  return "v512i1";
   case MVT::v1024i1: return "v1024i1";
+  case MVT::v2048i1: return "v2048i1";
   case MVT::v1i8:    return "v1i8";
   case MVT::v2i8:    return "v2i8";
   case MVT::v4i8:    return "v4i8";
@@ -187,9 +190,13 @@
   case MVT::v2f16:   return "v2f16";
   case MVT::v4f16:   return "v4f16";
   case MVT::v8f16:   return "v8f16";
+  case MVT::v16f16:  return "v16f16";
+  case MVT::v32f16:  return "v32f16";
+  case MVT::v64f16:  return "v64f16";
   case MVT::v4f32:   return "v4f32";
   case MVT::v8f32:   return "v8f32";
   case MVT::v16f32:  return "v16f32";
+  case MVT::v32f32:  return "v32f32";
   case MVT::v1f64:   return "v1f64";
   case MVT::v2f64:   return "v2f64";
   case MVT::v4f64:   return "v4f64";
@@ -228,9 +235,11 @@
   case MVT::v16i1:   return VectorType::get(Type::getInt1Ty(Context), 16);
   case MVT::v32i1:   return VectorType::get(Type::getInt1Ty(Context), 32);
   case MVT::v64i1:   return VectorType::get(Type::getInt1Ty(Context), 64);
   case MVT::v128i1:  return VectorType::get(Type::getInt1Ty(Context), 128);
+  case MVT::v256i1:  return VectorType::get(Type::getInt1Ty(Context), 256);
   case MVT::v512i1:  return VectorType::get(Type::getInt1Ty(Context), 512);
   case MVT::v1024i1: return VectorType::get(Type::getInt1Ty(Context), 1024);
+  case MVT::v2048i1: return VectorType::get(Type::getInt1Ty(Context), 2048);
   case MVT::v1i8:    return VectorType::get(Type::getInt8Ty(Context), 1);
   case MVT::v2i8:    return VectorType::get(Type::getInt8Ty(Context), 2);
   case MVT::v4i8:    return VectorType::get(Type::getInt8Ty(Context), 4);
@@ -264,15 +274,19 @@
   case MVT::v2f16:   return VectorType::get(Type::getHalfTy(Context), 2);
   case MVT::v4f16:   return VectorType::get(Type::getHalfTy(Context), 4);
   case MVT::v8f16:   return VectorType::get(Type::getHalfTy(Context), 8);
+  case MVT::v16f16:  return VectorType::get(Type::getHalfTy(Context), 16);
+  case MVT::v32f16:  return VectorType::get(Type::getHalfTy(Context), 32);
+  case MVT::v64f16:  return VectorType::get(Type::getHalfTy(Context), 64);
   case MVT::v1f32:   return VectorType::get(Type::getFloatTy(Context), 1);
   case MVT::v2f32:   return VectorType::get(Type::getFloatTy(Context), 2);
   case MVT::v4f32:   return VectorType::get(Type::getFloatTy(Context), 4);
   case MVT::v8f32:   return VectorType::get(Type::getFloatTy(Context), 8);
   case MVT::v16f32:   return VectorType::get(Type::getFloatTy(Context), 16);
+  case MVT::v32f32:  return VectorType::get(Type::getFloatTy(Context), 32);
   case MVT::v1f64:   return VectorType::get(Type::getDoubleTy(Context), 1);
   case MVT::v2f64:   return VectorType::get(Type::getDoubleTy(Context), 2);
   case MVT::v4f64:   return VectorType::get(Type::getDoubleTy(Context), 4);
   case MVT::v8f64:   return VectorType::get(Type::getDoubleTy(Context), 8);
   case MVT::Metadata: return Type::getMetadataTy(Context);
  }
 }
Index: tools/llvm-config/llvm-config.cpp
===================================================================
--- tools/llvm-config/llvm-config.cpp	(revision 309105)
+++ tools/llvm-config/llvm-config.cpp	(working copy)
@@ -216,6 +216,7 @@
   --shared-mode     Print how the provided components can be collectively linked (`shared` or `static`).\n\
   --link-shared     Link the components as shared libraries.\n\
   --link-static     Link the component libraries statically.\n\
+  --tce-patches     Print list of applied TCE patches.\n\
   --ignore-libllvm  Ignore libLLVM and link component libraries instead.\n\
 Typical components:\n\
   all               All LLVM libraries (default).\n\
@@ -567,6 +568,11 @@
         LinkMode = LinkModeShared;
       } else if (Arg == "--link-static") {
         LinkMode = LinkModeStatic;
+      } else if (Arg == "--tce-patches") {
+        OS << "custom-vector-extension" << '\n'
+           << "tce-and-tcele" << '\n'
+           << "memcpyoptimizer-only-on-default-as" << '\n'
+           << "loopidiomrecognize-only-on-default-as" << '\n';
       } else {
         usage();
       }
Index: utils/TableGen/CodeGenTarget.cpp
===================================================================
--- utils/TableGen/CodeGenTarget.cpp	(revision 309105)
+++ utils/TableGen/CodeGenTarget.cpp	(working copy)
@@ -82,9 +82,11 @@
   case MVT::v16i1:    return "MVT::v16i1";
   case MVT::v32i1:    return "MVT::v32i1";
   case MVT::v64i1:    return "MVT::v64i1";
   case MVT::v128i1:   return "MVT::v128i1";
+  case MVT::v256i1:   return "MVT::v256i1";
   case MVT::v512i1:   return "MVT::v512i1";
   case MVT::v1024i1:  return "MVT::v1024i1";
+  case MVT::v2048i1:  return "MVT::v2048i1";
   case MVT::v1i8:     return "MVT::v1i8";
   case MVT::v2i8:     return "MVT::v2i8";
   case MVT::v4i8:     return "MVT::v4i8";
@@ -118,11 +121,15 @@
   case MVT::v2f16:    return "MVT::v2f16";
   case MVT::v4f16:    return "MVT::v4f16";
   case MVT::v8f16:    return "MVT::v8f16";
+  case MVT::v16f16:   return "MVT::v16f16";
+  case MVT::v32f16:   return "MVT::v32f16";
+  case MVT::v64f16:   return "MVT::v64f16";
   case MVT::v1f32:    return "MVT::v1f32";
   case MVT::v2f32:    return "MVT::v2f32";
   case MVT::v4f32:    return "MVT::v4f32";
   case MVT::v8f32:    return "MVT::v8f32";
   case MVT::v16f32:   return "MVT::v16f32";
+  case MVT::v32f32:   return "MVT::v32f32";
   case MVT::v1f64:    return "MVT::v1f64";
   case MVT::v2f64:    return "MVT::v2f64";
   case MVT::v4f64:    return "MVT::v4f64";
