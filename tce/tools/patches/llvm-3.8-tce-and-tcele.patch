Index: include/llvm/ADT/Triple.h
===================================================================
--- include/llvm/ADT/Triple.h	(revision 257630)
+++ include/llvm/ADT/Triple.h	(working copy)
@@ -69,6 +69,7 @@
     sparcel,    // Sparc: (endianness = little). NB: 'Sparcle' is a CPU variant
     systemz,    // SystemZ: s390x
     tce,        // TCE (http://tce.cs.tut.fi/): tce
+    tcele,      // TCE little endian (http://tce.cs.tut.fi/): tcele
     thumb,      // Thumb (little endian): thumb, thumbv.*
     thumbeb,    // Thumb (big endian): thumbeb
     x86,        // X86: i[3-9]86
Index: lib/Support/Triple.cpp
===================================================================
--- lib/Support/Triple.cpp	(revision 257630)
+++ lib/Support/Triple.cpp	(working copy)
@@ -44,6 +44,7 @@
   case sparcel:     return "sparcel";
   case systemz:     return "s390x";
   case tce:         return "tce";
+  case tcele:       return "tcele";
   case thumb:       return "thumb";
   case thumbeb:     return "thumbeb";
   case x86:         return "i386";
@@ -252,6 +253,7 @@
     .Case("sparcv9", sparcv9)
     .Case("systemz", systemz)
     .Case("tce", tce)
+    .Case("tcele", tcele)
     .Case("thumb", thumb)
     .Case("thumbeb", thumbeb)
     .Case("x86", x86)
@@ -364,6 +366,7 @@
     .Case("sparcel", Triple::sparcel)
     .Cases("sparcv9", "sparc64", Triple::sparcv9)
     .Case("tce", Triple::tce)
+    .Case("tcele", Triple::tcele)
     .Case("xcore", Triple::xcore)
     .Case("nvptx", Triple::nvptx)
     .Case("nvptx64", Triple::nvptx64)
@@ -581,6 +584,7 @@
   case Triple::spir64:
   case Triple::systemz:
   case Triple::tce:
+  case Triple::tcele:
   case Triple::thumbeb:
   case Triple::wasm32:
   case Triple::wasm64:
@@ -1103,6 +1107,7 @@
   case llvm::Triple::sparc:
   case llvm::Triple::sparcel:
   case llvm::Triple::tce:
+  case llvm::Triple::tcele:
   case llvm::Triple::thumb:
   case llvm::Triple::thumbeb:
   case llvm::Triple::x86:
@@ -1180,6 +1185,7 @@
   case Triple::sparc:
   case Triple::sparcel:
   case Triple::tce:
+  case Triple::tcele:
   case Triple::thumb:
   case Triple::thumbeb:
   case Triple::x86:
@@ -1216,6 +1222,7 @@
   case Triple::msp430:
   case Triple::r600:
   case Triple::tce:
+  case Triple::tcele:
   case Triple::xcore:
   case Triple::sparcel:
   case Triple::shave:
@@ -1311,6 +1318,7 @@
     // Already big endian.
     break;
 
+  case Triple::tcele:   T.setArch(Triple::tce); break;
   case Triple::aarch64: T.setArch(Triple::aarch64_be); break;
   case Triple::bpfel:   T.setArch(Triple::bpfeb);      break;
   case Triple::mips64el:T.setArch(Triple::mips64);     break;
@@ -1328,7 +1336,6 @@
   case Triple::ppc:
   case Triple::sparcv9:
   case Triple::systemz:
-  case Triple::tce:
 
   // ARM is intentionally unsupported here, changing the architecture would
   // drop any arch suffixes.
@@ -1367,9 +1374,11 @@
   case Triple::x86:
   case Triple::x86_64:
   case Triple::xcore:
+  case Triple::tcele:
     // Already little endian.
     break;
 
+  case Triple::tce:        T.setArch(Triple::tcele); break;
   case Triple::aarch64_be: T.setArch(Triple::aarch64);  break;
   case Triple::bpfeb:      T.setArch(Triple::bpfel);    break;
   case Triple::mips64:     T.setArch(Triple::mips64el); break;
Index: tools/clang/lib/Basic/Targets.cpp
===================================================================
--- tools/clang/lib/Basic/Targets.cpp	(revision 258809)
+++ tools/clang/lib/Basic/Targets.cpp	(working copy)
@@ -6395,8 +6395,11 @@
     FloatFormat = &llvm::APFloat::IEEEsingle;
     DoubleFormat = &llvm::APFloat::IEEEsingle;
     LongDoubleFormat = &llvm::APFloat::IEEEsingle;
-    DataLayoutString = "E-p:32:32-i8:8:32-i16:16:32-i64:32"
-                       "-f64:32-v64:32-v128:32-a:0:32-n32";
+    DataLayoutString = "E-p:32:32:32-i1:8:8-i8:8:32-"
+                       "i16:16:32-i32:32:32-i64:32:32-"
+                       "f32:32:32-f64:32:32-v64:32:32-"
+                       "v128:32:32-v256:32:32-v512:32:32-"
+                       "v1024:32:32-a0:0:32-n32";
     AddrSpaceMap = &TCEOpenCLAddrSpaceMap;
     UseAddrSpaceMapMangling = true;
   }
@@ -6473,6 +6476,30 @@
   }
 };
 
+
+class TCELETargetInfo : public TCETargetInfo {
+public:
+    TCELETargetInfo(const llvm::Triple &Triple) : TCETargetInfo(Triple) {
+        BigEndian = false;
+
+	 DataLayoutString = "e-p:32:32:32-i1:8:8-i8:8:32-"
+            "i16:16:32-i32:32:32-i64:32:32-"
+            "f32:32:32-f64:32:32-v64:32:32-"
+            "v128:32:32-v256:32:32-v512:32:32-v1024:32:32-a0:0:32-n32";
+
+      }
+
+    virtual void getTargetDefines(const LangOptions &Opts,
+                                  MacroBuilder &Builder) const {
+      DefineStd(Builder, "tcele", Opts);
+      Builder.defineMacro("__TCE__");
+      Builder.defineMacro("__TCE_V1__");
+      Builder.defineMacro("__TCELE__");
+      Builder.defineMacro("__TCELE_V1__");
+    }
+
+};
+
 class MipsTargetInfoBase : public TargetInfo {
   virtual void setDataLayoutString() = 0;
 
@@ -7802,6 +7829,9 @@
   case llvm::Triple::tce:
     return new TCETargetInfo(Triple);
 
+  case llvm::Triple::tcele:
+    return new TCELETargetInfo(Triple);
+
   case llvm::Triple::x86:
     if (Triple.isOSDarwin())
       return new DarwinI386TargetInfo(Triple);
Index: tools/clang/lib/CodeGen/TargetInfo.cpp
===================================================================
--- tools/clang/lib/CodeGen/TargetInfo.cpp	(revision 258809)
+++ tools/clang/lib/CodeGen/TargetInfo.cpp	(working copy)
@@ -7551,6 +7551,10 @@
   case llvm::Triple::tce:
     return *(TheTargetCodeGenInfo = new TCETargetCodeGenInfo(Types));
 
+  // code gen info is same for tce and tce le
+  case llvm::Triple::tcele:
+    return *(TheTargetCodeGenInfo = new TCETargetCodeGenInfo(Types));
+
   case llvm::Triple::x86: {
     bool IsDarwinVectorABI = Triple.isOSDarwin();
     bool RetSmallStructInRegABI =
Index: tools/clang/lib/Driver/Driver.cpp
===================================================================
--- tools/clang/lib/Driver/Driver.cpp	(revision 258809)
+++ tools/clang/lib/Driver/Driver.cpp	(working copy)
@@ -2287,6 +2287,9 @@
       case llvm::Triple::tce:
         TC = new toolchains::TCEToolChain(*this, Target, Args);
         break;
+      case llvm::Triple::tcele:
+        TC = new toolchains::TCELEToolChain(*this, Target, Args);
+        break;
       case llvm::Triple::hexagon:
         TC = new toolchains::HexagonToolChain(*this, Target, Args);
         break;
Index: tools/clang/lib/Driver/ToolChains.cpp
===================================================================
--- tools/clang/lib/Driver/ToolChains.cpp	(revision 258809)
+++ tools/clang/lib/Driver/ToolChains.cpp	(working copy)
@@ -2971,6 +2971,14 @@
   return new tools::cloudabi::Linker(*this);
 }
 
+TCELEToolChain::TCELEToolChain(const Driver &D, const llvm::Triple& Triple,
+                               const ArgList &Args)
+  : TCEToolChain(D, Triple, Args) {
+}
+
+TCELEToolChain::~TCELEToolChain() {
+}
+
 /// OpenBSD - OpenBSD tool chain which can call as(1) and ld(1) directly.
 
 OpenBSD::OpenBSD(const Driver &D, const llvm::Triple &Triple,
Index: tools/clang/lib/Driver/ToolChains.h
===================================================================
--- tools/clang/lib/Driver/ToolChains.h	(revision 258809)
+++ tools/clang/lib/Driver/ToolChains.h	(working copy)
@@ -952,6 +952,13 @@
   bool isPICDefaultForced() const override;
 };
 
+class LLVM_LIBRARY_VISIBILITY TCELEToolChain : public TCEToolChain {
+public:
+  TCELEToolChain(const Driver &D, const llvm::Triple &Triple,
+                 const llvm::opt::ArgList &Args);
+  ~TCELEToolChain();
+};
+
 class LLVM_LIBRARY_VISIBILITY MSVCToolChain : public ToolChain {
 public:
   MSVCToolChain(const Driver &D, const llvm::Triple &Triple,
