/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file ProximUnitWindow.cc
 *
 * Definition of ProximUnitWindow class.
 *
 * @author Veli-Pekka J‰‰skel‰inen 2006 (vjaaskel-no.spam-cs.tut.fi)
 * @note rating: red
 */


#include <string>
#include <wx/statline.h>
#include <wx/listctrl.h>

#include "ProximUnitWindow.hh"
#include "Proxim.hh"
#include "WxConversion.hh"
#include "TracedSimulatorFrontend.hh"
#include "ProximSimulationThread.hh"


BEGIN_EVENT_TABLE(ProximUnitWindow, wxPanel)
    EVT_SIMULATOR_STOP(0, ProximUnitWindow::onSimulationStop)
    EVT_SIMULATOR_PROGRAM_LOADED(0, ProximUnitWindow::onProgramLoaded)
    EVT_CHOICE(ID_UNIT_CHOICE, ProximUnitWindow::onChoice)
    EVT_CHOICE(ID_MODE_CHOICE, ProximUnitWindow::onChoice)
    EVT_BUTTON(ID_CLOSE, ProximUnitWindow::onClose)
END_EVENT_TABLE()

using std::string;
using namespace TTAMachine;

const wxString ProximUnitWindow::MODE_INT = _T("Int");
const wxString ProximUnitWindow::MODE_UNSIGNED = _T("Unsigned");
const wxString ProximUnitWindow::MODE_HEX = _T("Hex");
const wxString ProximUnitWindow::MODE_BIN = _T("Binary");

/**
 * Constructor.
 *
 * @param parent Parent window of the window.
 * @param id Window identifier.
 */
ProximUnitWindow::ProximUnitWindow(
    ProximMainFrame* parent, int id):
    ProximSimulatorWindow(parent, id),
    unitChoice_(NULL),
    valueList_(NULL) {

    createContents(this, true, true);

    simulator_ = wxGetApp().simulation()->frontend();

    unitChoice_ = dynamic_cast<wxChoice*>(FindWindow(ID_UNIT_CHOICE));
    modeChoice_ = dynamic_cast<wxChoice*>(FindWindow(ID_MODE_CHOICE));
    valueList_ = dynamic_cast<wxListCtrl*>(FindWindow(ID_VALUE_LIST));

    modeChoice_->Append(MODE_INT);
    modeChoice_->Append(MODE_UNSIGNED);
    modeChoice_->Append(MODE_HEX);
    modeChoice_->Append(MODE_BIN);
    modeChoice_->SetSelection(0);

}


/**
 * Destructor.
 */
ProximUnitWindow::~ProximUnitWindow() {    
}


/**
 * Called when the unit choicer needs to be reinitialized.
 */
void
ProximUnitWindow::reinitialize() {
}


/**
 * Event handler which is called when a new program is loaded in the simulator.
 */
void
ProximUnitWindow::onProgramLoaded(const SimulatorEvent&) {
    reinitialize();
}


/**
 * Called when the value list needs to be updated.
 */
void
ProximUnitWindow::update() {
}


/**
 * Event handler for simulation stop.
 *
 * Updates the value list.
 */
void
ProximUnitWindow::onSimulationStop(const SimulatorEvent&) {
    update();
}


/**
 * Event handler for the dialog mode and unit choicers.
 *
 * Updates the values list.
 */
void
ProximUnitWindow::onChoice(wxCommandEvent&) {
    update();
}

/**
 * Event handler for the Close button.
 *
 * Closes the window by destroying the parent frame of the window.
 */
void
ProximUnitWindow::onClose(wxCommandEvent&) {
    wxFrame* parent = dynamic_cast<wxFrame*>(GetParent());
    if (parent != NULL) {
	parent->Destroy();
    }
}


/**
 * Creates the window contents.
 *
 * Code generated by wxWidgets.
 *
 * @param parent Parent window of the dialog contents.
 * @param call_fit If true, created contents are fit inside the parent window.
 * @param set_sizer If true, created top level sizer is set as the parent
 *                  window contents.
 * @return Top level sizer of the created widgets.
 */
wxSizer*
ProximUnitWindow::createContents(
    wxWindow* parent, bool call_fit, bool set_sizer) {

    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableRow( 2 );

    wxGridSizer *item1 = new wxGridSizer( 2, 0, 0 );

    wxString *strs2 = (wxString*) NULL;
    wxChoice *item2 = new wxChoice( parent, ID_UNIT_CHOICE, wxDefaultPosition, wxSize(120,-1), 0, strs2, 0 );
    item1->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString *strs3 = (wxString*) NULL;
    wxChoice *item3 = new wxChoice( parent, ID_MODE_CHOICE, wxDefaultPosition, wxSize(120,-1), 0, strs3, 0 );
    item1->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticLine *item4 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxListCtrl *item5 = new wxListCtrl( parent, ID_VALUE_LIST, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER );
    item0->Add( item5, 0, wxGROW|wxALL, 5 );

    wxStaticLine *item6 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item6, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxGridSizer *item7 = new wxGridSizer( 2, 0, 0 );

    wxButton *item8 = new wxButton( parent, ID_HELP, wxT("&Help"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item8, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxButton *item9 = new wxButton( parent, ID_CLOSE, wxT("&Close"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item9, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item7, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}
