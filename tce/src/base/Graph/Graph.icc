/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file Graph.icc
 *
 * Inline and template implementations of GraphBase.
 *
 * @author Pekka J‰‰skel‰inen 2007 (pekka.jaaskelainen-no.spam-tut.fi)
 * @note rating: red
 */

#include <fstream>
#include <sstream>

/**
 * Returns the graph as a string formatted in GraphViz Dot format.
 *
 * The default implementation returns a plain string by traversing through
 * all the nodes and edges and querying calling their dotString().
 *
 * @return Graph represented as a Dot string.
 */
template<typename GraphNode, typename GraphEdge>
TCEString
GraphBase<GraphNode, GraphEdge>::dotString() const {

    std::ostringstream s;
    s << "digraph " << name() << " {" << std::endl;

    // first print all the nodes and their properties
    for (int i = 0; i < nodeCount(); ++i) {
        Node& n = node(i);
        s << "\tn" << n.nodeID()
          << " [" << n.dotString() << "]; " 
          << std::endl;
    }

    // edges
    for (int count = edgeCount(), i = 0; i < count ; ++i) {
        Edge& e = edge(i);
        Node& tail = tailNode(e);
        Node& head = headNode(e);

        s << "\tn" << tail.nodeID() << " -> n" 
          << head.nodeID() << "[" 
          << e.dotString() << "];" << std::endl;
    }
    s << "}" << std::endl;   
    return s.str();    
}

/**
 * Prints the graph as a string formatted in GraphViz Dot format to a text file.
 *
 * @param fileName The filename to print the graph to.
 */
template<typename GraphNode, typename GraphEdge>
void
GraphBase<GraphNode, GraphEdge>::writeToDotFile(
    const TCEString& fileName) const {

    std::ofstream output(fileName.c_str());
    output << dotString();
    output.close();
}

