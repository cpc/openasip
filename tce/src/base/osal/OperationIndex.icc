/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file OperationIndex.icc
 *
 * Inline implementations of OperationIndex class.
 *
 * @author Jussi Nykänen 2004 (nykanen-no.spam-cs.tut.fi)
 * @note rating: yellow
 * @note reviewed 19 August 2004 by pj, jn, ao, ac
 */

/**
 * Returns the path by the given index in the search path list.
 *
 * @param i The index of wanted search path.
 * @return The search path by the given index or empty string.
 * @exception OutOfRange If index i is out of range.
 */
inline std::string
OperationIndex::path(int i) const 
     {

    if (i < 0 || static_cast<unsigned>(i) > paths_.size() - 1) {
        std::string msg = "Index out of range";
        throw OutOfRange(__FILE__, __LINE__, __func__, msg);
    }
    return paths_[i];
}

/**
 * Returns the number of search paths.
 *
 * @return The number of search paths.
 */
inline int
OperationIndex::pathCount() const {
    return paths_.size();
}

/**
 * Returns the number of OperationModules.
 *
 * @return The number of OperationModules.
 */
inline int
OperationIndex::moduleCount() const {
    return modules_.size();
}

/**
 * Returns the module by the given index.
 *
 * @param i The index of wanted OperationModule.
 * @return The module by the given index or if not found, null module.
 * @exception OutOfRange If index i is out of range.
 */
inline OperationModule&
OperationIndex::module(int i) 
     {
 
    if (i < 0 || static_cast<unsigned>(i) > modules_.size() - 1) {
        std::string msg = "index out of range";
        throw OutOfRange(__FILE__, __LINE__, __func__, msg);
    }
    return *modules_[i];
}
