/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file SymbolElement.icc
 *
 * Inline definitions of SymbolElement class.
 *
 * @author Jussi Nykänen 2003 (nykanen-no.spam-cs.tut.fi)
 * @author Mikael Lepistö 18.12.2003 (tmlepist-no.spam-cs.tut.fi)
 * @note reviewed 22 October 2003 by ml, jn, ao, tr
 *
 * @note rating: yellow
 */

namespace TPEF {

/**
 * Returns is the element absolute or relocating.
 *
 * @return Is the element absolute or relocating.
 */
inline bool
SymbolElement::absolute() const {
    return absolute_;
}

/**
 * Sets is the element absolute or relocating.
 *
 * @param anAbsoluteness True if absolute,
 */
inline void
SymbolElement::setAbsolute(bool anAbsoluteness) {
    absolute_ = anAbsoluteness;
}

/**
 * Returns the binding type.
 *
 * @return The binding type.
 */
inline SymbolElement::SymbolBinding
SymbolElement::binding() const {
    return bind_;
}

/**
 * Sets the binding type.
 *
 * @param aBind The binding type.
 */
inline void
SymbolElement::setBinding(SymbolBinding aBind) {
    bind_ = aBind;
}

/**
 * Returns the name.
 *
 * @return The name.
 */
inline Chunk*
SymbolElement::name() const {
    return dynamic_cast<Chunk*>(name_->pointer());
}

/**
 * Sets the name.
 *
 * @param aName The name.
 */
inline void
SymbolElement::setName(const ReferenceManager::SafePointer* aName) {
    name_ = aName;
}

/**
 * Sets the name.
 *
 * @param aName The name.
 */
inline void
SymbolElement::setName(Chunk* aName) {
    name_ = ReferenceManager::SafePointer::replaceReference(name_, aName);
}

/**
 * Returns the section to which the symbol belong.
 *
 * @return The section to which the symbol belong.
 */
inline Section*
SymbolElement::section() const {
    return dynamic_cast<Section*>(section_->pointer());
}

/**
 * Sets the section to which the symbol belong.
 *
 * @param aSect The section to which symbol belong.
 */
inline void
SymbolElement::setSection(const ReferenceManager::SafePointer* aSect) {
    section_ = aSect;
}

/**
 * Sets the section to which the symbol belong.
 *
 * @param aSect The section to which symbol belong.
 */
inline void
SymbolElement::setSection(Section* aSect) {
    section_ = ReferenceManager::SafePointer::replaceReference(section_, aSect);
}

}
