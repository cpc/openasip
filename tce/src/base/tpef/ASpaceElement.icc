/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file ASpaceElement.icc
 *
 * Inline definitions of ASpaceElement class.
 *
 * @author Mikael Lepistö 2003 (tmlepist-no.spam-cs.tut.fi)
 *
 * @note rating: yellow
 */

namespace TPEF {

/**
 * Returns bitwidth of minimum addressable unit.
 *
 * @return Bitwidth of minimum addressable unit.
 */
inline Byte
ASpaceElement::MAU() const {
    return mau_;
}
    
/**
 * Sets bitwidth of minimum addressable unit.
 *
 * @param aMAU Bitwidth to set.
 */
inline void
ASpaceElement::setMAU(Byte aMAU) {
    mau_ = aMAU;
}

/**
 * Returns aligment of natural word.
 *
 * @return Aligment in MAU units.
 */
inline Byte
ASpaceElement::align() const {
    return align_;
}

/**
 * Sets aligment.
 *
 * @param aAlign Aligment of address space in MAU units.
 */
inline void
ASpaceElement::setAlign(Byte aAlign) {
    align_ = aAlign;
}

/**
 * Returns word size.
 *
 * @return Word size in MAU units.
 */
inline Byte
ASpaceElement::wordSize() const {
    return wSize_;
}

/**
 * Sets word size.
 *
 * @param aWordSize Word size in MAU units.
 */
inline void
ASpaceElement::setWordSize(Byte aWordSize) {
    wSize_ = aWordSize;
}

/**
 * Sets name.
 *
 * @param aName Reference to string table element.
 */
inline void
ASpaceElement::setName(const ReferenceManager::SafePointer* aName) {
    name_ = aName;
}

/**
 * Sets name.
 *
 * @param aName Reference to string table element.
 */
inline void
ASpaceElement::setName(Chunk* aName) {
    name_ = ReferenceManager::SafePointer::replaceReference(name_, aName);
}

/**
 * Returns name.
 *
 * @return String table element of name.
 */
inline Chunk*
ASpaceElement::name() const {
    return dynamic_cast<Chunk*>(name_->pointer());
}

}
