/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file LineNumProcedure.icc
 *
 * Inline definitions of LineNumProcedure class.
 *
 * @author Mikael Lepistö 2003 (tmlepist-no.spam-cs.tut.fi)
 *
 * @note rating: yellow
 */

#include "MapTools.hh"

namespace TPEF {

/**
 * Returns symbol of the procedure.
 *
 * @return Symbol of the procedure.
 */
inline SymbolElement*
LineNumProcedure::procedureSymbol() const {
    return dynamic_cast<SymbolElement*>(symbol_->pointer());
}

/**
 * Symbol of the procedure.
 *
 * @param Symbol of the procedure.
 */
inline void
LineNumProcedure::setProcedureSymbol(
    const ReferenceManager::SafePointer* aRef) {
    symbol_ = aRef;
}

/**
 * Symbol of the procedure.
 *
 * @param Symbol of the procedure.
 */
inline void
LineNumProcedure::setProcedureSymbol(SymbolElement* aRef) {
    symbol_ = ReferenceManager::SafePointer::replaceReference(symbol_, aRef);
}

/**
 * Adds line to procedure.
 *
 * If there is already value for that line number, it will be deleted
 * and replaced by a new element.
 *
 * @param elem Line number to add.
 */
inline void
LineNumProcedure::addLine(const LineNumElement* elem) {
    assert(elem != NULL);
    lines_.push_back(elem);
}

/**
 * Returns the element of requested index.
 *
 * @param index Index of element to return.
 * @return Element which was found from requested index.
 */
inline const LineNumElement*
LineNumProcedure::line(HalfWord index) const {
    return lines_[index];
}

/**
 * Returns line numbers which are defined for procedure.
 *
 * @return Line numbers which are defined for procedure.
 */
inline HalfWord
LineNumProcedure::lineCount() const {
    return lines_.size();
}

}
