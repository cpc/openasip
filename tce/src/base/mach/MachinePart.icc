/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file MachinePart.icc
 *
 * Inline implementation of Component class.
 *
 * @author Lasse Laasonen 2004 (lasse.laasonen-no.spam-tut.fi)
 * @note reviewed 17 Jun 2004 by jn, pj, jm, ll
 * @note rating: red
 */

#include "Application.hh"

namespace TTAMachine {

/**
 * Sets the machine for this component.
 *
 * Helper function. Called by setMachine() as part of the registration
 * process. Brings component and given machine into a transient state of
 * incomplete registration.
 *
 * @param machine Machine to which the component is going to be registered.
 */
inline void
Component::internalSetMachine(Machine& machine) {
    assert(machine_ == NULL);
    machine_ = &machine;
}


/**
 * Unsets the machine for this component.
 *
 * Helper function. Called by unsetMachine() as part of the registration
 * removal process.
 */
inline void
Component::internalUnsetMachine() {
    assert(machine_ != NULL);
    machine_ = NULL;
}

/**
   Comparator
*/
bool
MachinePart::Comparator::operator() (
    const MachinePart* mp1, const MachinePart* mp2) const {
    if (mp1 == NULL) {
        return false;
    }
    if (mp2 == NULL) {
        return true;
    }
    return mp1->id_ > mp2->id_;
}

/**
 * Returns the machine which is set for this component.
 *
 * @return The machine which is set for this component.
 */
inline Machine*
Component::machine() const {
    return machine_;
}

}
