/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file Guard.icc
 *
 * Inline implementation of Guard classes.
 *
 * @author Lasse Laasonen 2004 (lasse.laasonen-no.spam-tut.fi)
 */

namespace TTAMachine {

/**
 * Returns the parent bus of the guard.
 *
 * @return The parent bus of the guard.
 */
inline Bus*
Guard::parentBus() const {
    return parent_;
}


/**
 * Returns true if the guard is inverted, otherwise false.
 *
 * @return True if the guard is inverted, otherwise false.
 */
inline bool
Guard::isInverted() const {
    return inverted_;
}


/////////////////////////////////////////////////////////////////////////////
// PortGuard
/////////////////////////////////////////////////////////////////////////////

/**
 * Returns the port from which the condition term is taken.
 *
 * @return The port from which the condition term is taken.
 */
inline FUPort*
PortGuard::port() const {
    return port_;
}


/////////////////////////////////////////////////////////////////////////////
// RegisterGuard
/////////////////////////////////////////////////////////////////////////////

/**
 * Returns the register file which contains the register from which the
 * condition term is taken.
 *
 * @return The register file which contains the register from which the
 *         condition term is taken.
 */
inline RegisterFile*
RegisterGuard::registerFile() const {
    return regFile_;
}


/**
 * Returns the index of the register in register file from which the
 * condition term is taken.
 *
 * @return The index of the register in register file from which the
 *         condition term is taken.
 */
inline int
RegisterGuard::registerIndex() const {
    return registerIndex_;
}
}
