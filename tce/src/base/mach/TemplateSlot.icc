/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file TemplateSlot.icc
 *
 * Inline implementation of TemplateSlot class.
 *
 * @author Lasse Laasonen 2004 (lasse.laasonen-no.spam-tut.fi)
 * @note rating: red
 */

#include "Application.hh"
#include "Bus.hh"

namespace TTAMachine {

/**
 * Returns the number of significant bits that can be encoded in this
 * instruction field.
 *
 * @return The number of significant bits that can be encoded in this
 *         instruction field.
 */
inline int
TemplateSlot::width() const {
    return width_;
}


/**
 * Returns the name of the slot (bus or immediate slot) that normally 
 * (that is, when this slot is not used to encode long immediate bits) is
 * programmed by the instruction bit field of this template slot.
 *
 * @return The name of the slot that normally is programmed by the
 *         instruction bit field of this template slot.
 */
inline std::string
TemplateSlot::slot() const {
    if (bus_ != NULL) {
        return bus_->name();
    } else {
        assert(immSlot_ != NULL);
        return immSlot_->name();
    }
}


/**
 * Returns the destination immediate unit of the slot.
 *
 * @return The destination immediate unit.
 */
inline ImmediateUnit*
TemplateSlot::destination() const {
    return destination_;
}

/**
 * Returns the bus this template slot is related to.
 */
inline const Bus*
TemplateSlot::bus() const { 
    return bus_; 
}

}
