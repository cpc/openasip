/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file MoveNode.icc
 *
 * Inline method implementation of MoveNode class.
 *
 * Nodes are the minimum independent unit of information in a
 * minimally-ordered program representation. Typically, but not necessarily,
 * the nodes in a program representation are linked together by dependences
 * and thus form a graph.
 *
 * @author Heikki Kultala 2009 (hkultala-no.spam-cs.tut.fi)
 * @note rating: red
 */

#include "Conversion.hh"

/**
 * Tells whether the destination of the node (move) belongs to an operation.
 *
 * @return True if the destination of the node is an operation input.
 */
inline bool
MoveNode::isDestinationOperation() const {
    if (move_ == NULL) {
        return false;
    }
    return dstOps_.size() != 0;
}

/**
 * Tells how many operations this movenode is an operand to(operand sharing)
 *
 */
inline unsigned int
MoveNode::destinationOperationCount() const {
    if (move_ == NULL) {
        return 0;
    }
    return dstOps_.size();
}

/**
 * Access Move inside MoveNode, casting constantness away
 *
 * @return reference to Move inside MoveNode
 */
inline TTAProgram::Move&
MoveNode::move(){
    if (move_ == NULL) {
        throw NotAvailable(__FILE__,__LINE__,__func__,
            "Move of MoveNode is NULL");
    }
    return const_cast<TTAProgram::Move&> (*move_);
}

/**
 * Access Move inside MoveNode, const version.
 *
 * @return reference to Move inside MoveNode
 */
inline const TTAProgram::Move&
MoveNode::move() const {
    if (move_ == NULL) {
        throw NotAvailable(__FILE__,__LINE__,__func__,
            "Move of MoveNode is NULL");
    }
    return *move_;
}

/**
 * Returns true if it's a real move, not a pseudo move such as entry node.
 */
inline bool
MoveNode::isMove() const {
    return move_ != NULL;
}

/**
 * Returns the instance of operation in the program whose input is the
 * destination of this node.
 *
 * @return A program operation.
 * @exception InvalidData if the given node does not write an operation
 *     input.
 */
inline ProgramOperation&
MoveNode::destinationOperation(unsigned int index) const
     {

    return *dstOps_[index].get();
}

inline ProgramOperationPtr
MoveNode::destinationOperationPtr(unsigned int index) const
     {

    if (!isDestinationOperation()){
        std::string msg = "MoveNode destination is not Operation.";
        throw InvalidData(__FILE__, __LINE__, __func__, msg);
    } else {
        if (index >= dstOps_.size()) {
            std::string msg = 
                "MoveNode does not have dst Operation of index" + 
                Conversion::toString(index);
            throw InvalidData(__FILE__, __LINE__, __func__, msg);
        }
        return dstOps_[index];
    }
}

