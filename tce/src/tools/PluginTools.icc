/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file PluginTools.icc
 *
 * Template method definitions of PluginTools.
 *
 * @author Jussi Nykänen 2004 (nykanen-no.spam-cs.tut.fi)
 * @note reviewed 19 May 2004 by ml, jn, ao, am
 * @note rating: green
 */

#include <stdint.h>

/**
 * Loads a symbol from a module.
 *
 * The target symbol is cast to void* to make it possible to assign the
 * loaded symbol to it.
 *
 * @param symbolName The symbol being loaded.
 * @param target The target for loaded symbol.
 * @param module The module where symbol is loaded from.
 * @exception MultipleInstancesFound If multiple instances of module are
 *                                   found.
 * @exception FileNotFound If module is not found.
 * @exception DynamicLibraryException If occurs problems with dynamic
 *                                    libraries.
 * @exception SymbolNotFound If symbol is not found.
 */
template <typename T>
void
PluginTools::importSymbol(
    const std::string& symbolName,
    T*& target,
    const std::string& module)
     {

    /* This produces warnings with newer gcc's, but it seems it's 
       a known problem with dlsym():

       http://www.opengroup.org/onlinepubs/009695399/functions/dlsym.html
       (see its rationale)

       http://stackoverflow.com/questions/1096341/function-pointers-casting-in-c
       http://www.trilithium.com/johan/2004/12/problem-with-dlsym/
       http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#573       
    */
    target = (T*)(intptr_t)loadSym(symbolName, module);
}


/**
 * Loads a symbol.
 *
 * The target symbol is cast to void* to make it possible to assign the
 * loaded symbol to it.
 *
 * @param symbolName The symbol being loaded.
 * @param target The target where symbol is stored.
 * @exception MultipleInstancesFound If multiple instances of module are
 *                                   found.
 * @exception FileNotFound If module is not found.
 * @exception DynamicLibraryException If occurs problems with dynamic
 *                                    libraries.
 * @exception SymbolNotFound If symbol is not found.
 */
template <typename T>
void
PluginTools::importSymbol(const std::string& symbolName, T*& target)
     {

    target = (T*)(intptr_t)loadSym(symbolName);
}
