/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file ContainerTools.icc
 * @author Pekka J‰‰skel‰inen (pjaaskel-no.spam-cs.tut.fi) 2003
 *
 * Tools for handling STL containers.
 *
 * Inline and template definitions.
 *
 */


#include <algorithm>

/**
 *
 * Returns true if given container contains the given value.
 *
 * @param aContainer The container to look in.
 * @param aValue Value to look for.
 */
template <typename ContainerType, typename ElementType>
bool
ContainerTools::containsValue(
    const ContainerType& aContainer, const ElementType& aValue) {

    for (typename ContainerType::const_iterator iter = aContainer.begin();
         iter != aContainer.end(); iter++) {

        if (*iter == aValue) {
            return true;
        }
    }

    return false;
}


/**
 * Removes an element from a container, if its found.
 *
 * @param aContainer The container to look in.
 * @param aKey The key to look for.
 * @return True if the element was removed, otherwise false.
 */
template <typename ContainerType, typename ElementType>
bool
ContainerTools::removeValueIfExists(
    ContainerType& aContainer,
    const ElementType& aKey) {

    for (typename ContainerType::iterator i = aContainer.begin();
         i != aContainer.end(); i++) {
        if (*i == aKey) {
            aContainer.erase(i);
            return true;
        }
    }

    return false;
}


/**
 * Removes a pointer from a container if it is found and destructs the
 * object that it points to.
 *
 * @param aContainer The container to look in.
 * @param aKey The key to look for.
 * @return True if the element was removed, otherwise false.
 */
template <typename ContainerType, typename ElementType>
bool
ContainerTools::deleteValueIfExists(
    ContainerType& aContainer,
    const ElementType& aKey) {

    for (typename ContainerType::iterator i = aContainer.begin();
         i != aContainer.end(); i++) {
        if (*i == aKey) {
            aContainer.erase(i);
            delete aKey;
            return true;
        }
    }

    return false;
}


/**
 * Removes the values in the second container from the first container
 * given.
 *
 * @param aContainer The container to remove values from.
 * @param toRemove The container which contains the values to be removed.
 */
template <typename ContainerType>
void
ContainerTools::removeValues(
    ContainerType& aContainer,
    const ContainerType& toRemove) {

    for (typename ContainerType::const_iterator iter = toRemove.begin();
         iter != toRemove.end(); iter++) {
        removeValueIfExists(aContainer, *iter);
    }
}


