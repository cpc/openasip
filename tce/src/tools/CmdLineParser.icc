/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file CmdLineParser.icc
 *
 * Definitions of inline methods for CmdLineParser class.
 *
 * @author Jussi Nykänen 2003 (nykanen-no.spam-cs.tut.fi)
 * @author Jari Mäntyneva 2006 (jari.mantyneva-no.spam-tut.fi)
 * @note reviewed 3 December 2003 by jn, kl, ao
 * @note rating: green
 */

/**
 * Add a new option to option data base.
 *
 * Option name must differ from any prefix.
 *
 * @param opt The option to be added.
 */
inline void
CmdLineParser::addOption(CmdLineOptionParser* opt) {

    assert(!isPrefix(opt->longName()));

    optionLongNames_.insert(valType(opt->longName(), opt));

    // if option has shorter alias, also it is added
    if (opt->shortName() != "") {
        optionShortNames_.insert(valType(opt->shortName(), opt));
    }
}

/**
 * Returns the number of command line arguments.
 *
 * @return The number of command line arguments.
 */
inline int
CmdLineParser::numberOfArguments() const {
    return arguments_.size();
}

/**
 * Returns a particular command line argument.
 *
 * @param index The index of wanted command line argument.
 * @return The particular command line argument.
 * @exception OutOfRange Throws if argument index is out of range.
 */
inline std::string
CmdLineParser::argument(int index) const
     {

    if (index < 1 || (unsigned)index > arguments_.size()) {
        std::string message = "Argument index out of range.";
        throw OutOfRange(__FILE__, __LINE__, __func__, message);
    } else {
        return arguments_[index - 1];
    }
}

/**
 * Checks whether a particular string is a prefix.
 *
 * @param name The name to be checked.
 * @return True if string to be checked is a prefix.
 */
inline bool
CmdLineParser::isPrefix(std::string name) const {
    for (unsigned int i = 0; i < prefixes_.size(); i++) {
        if (prefixes_[i] == name) {
            return true;
        }
    }
    return false;
}


