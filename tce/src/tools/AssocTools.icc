/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file AssocTools.icc
 *
 * Tools for handling STL Associative Containers (usually set).
 *
 * Inline and template definitions.
 *
 * @author Pekka J‰‰skel‰inen 2007 (pekka.jaaskelainen-no.spam-tut.fi) 
 */

#include <algorithm>

/**
 *
 * Deletes all items in a map and clears it.
 *
 * Calls delete for all items in container and clears it.
 *
 * @param aMap The map to delete all items from.
 */
template <typename ContainerType>
void
AssocTools::deleteAllItems(ContainerType& aMap) {

    typename ContainerType::iterator next;
    for (typename ContainerType::iterator i = aMap.begin();
        i != aMap.end(); ) {

        // This trick is necessary because this same container can be
        // modified (element erased) in the destructor of the deleted
        // object. It would render the iterator faulty. Note that this
        // works only for associative containers, with vectors the
        // next iterator would get corrupted too.
        next = i;
        next++;
        delete (*i);
        i = next;
    }

    aMap.clear();
}

/**
 * Delete all values in a map and clears it.
 *
 * @param aMap The map to delete the values from.
 */
template <typename ContainerType>
void
AssocTools::deleteAllValues(ContainerType& aMap) {

    for (typename ContainerType::iterator i = aMap.begin(); i != aMap.end();
         i++) {
        delete (*i).second;
    }
    aMap.clear();
}

/**
 * Checks if an element is found by the given key from the given container.
 *
 * @param aContainer The container to look in.
 * @param aKey The key to look for.
 * @return True if the key is found, otherwise false.
 */
template <typename ContainerType, typename KeyType>
bool
AssocTools::containsKey(
    const ContainerType& aContainer,
    const KeyType& aKey) {

    return (aContainer.find(aKey) != aContainer.end());
}




/**
 * Constructs set difference of the given containers.
 *
 * The elements in the difference are selected by using < operator
 * of the elements in the container. If the first given container contains
 * an element that the second does not, it is added to the difference.
 *
 * @param firstContainer The first container.
 * @param secondContainer The second container.
 * @param difference Result set. Updated by adding all elements in the first
 *            container that are not in the second container.
 */
template <typename ContainerType>
void
AssocTools::difference(
    const ContainerType& firstContainer,
    const ContainerType& secondContainer,
    ContainerType& difference) {

    std::insert_iterator<ContainerType>
        differenceIter(difference, difference.end());
    std::set_difference(firstContainer.begin(), firstContainer.end(),
                        secondContainer.begin(), secondContainer.end(),
                        differenceIter);
}

/**
 * Finds all pair-wise combinations of elements in two containers.
 *
 * @return A set of pairs containing all combinations of elements.
 */
template <typename ContainerType1, typename ContainerType2>
std::set<std::pair<
             typename ContainerType1::value_type, 
             typename ContainerType2::value_type> >
AssocTools::pairs(
    ContainerType1& firstContainer,
    ContainerType2& secondContainer) {

    typedef std::set<std::pair<
    typename ContainerType1::value_type, 
        typename ContainerType2::value_type> > CombinationSet;
    CombinationSet combinations;
    for (typename ContainerType1::const_iterator i1 = firstContainer.begin();
         i1 != firstContainer.end(); ++i1) {
        for (typename ContainerType2::const_iterator i2 = 
                 secondContainer.begin(); i2 != secondContainer.end(); ++i2) {
            combinations.insert(std::make_pair(*i1, *i2));
        }
    }
    return combinations;
}

/**
 * Finds all pair-wise combinations of elements in two containers.
 *
 * @return A set of pairs containing all combinations of elements.
 */
template <typename Comparator,typename ContainerType1, typename ContainerType2>
std::set<std::pair<
    typename ContainerType1::value_type, 
    typename ContainerType2::value_type>, Comparator >
AssocTools::pairs(
    ContainerType1& firstContainer,
    ContainerType2& secondContainer) {

    typedef std::set<std::pair<
    typename ContainerType1::value_type, 
        typename ContainerType2::value_type>, Comparator > CombinationSet;
    CombinationSet combinations;
    for (typename ContainerType1::const_iterator i1 = firstContainer.begin();
         i1 != firstContainer.end(); ++i1) {
        for (typename ContainerType2::const_iterator i2 = 
                 secondContainer.begin(); i2 != secondContainer.end(); ++i2) {
            combinations.insert(std::make_pair(*i1, *i2));
        }
    }
    return combinations;
}


/**
 * Appends all data from the first container to the second.
 */
template <typename ContainerType>
void AssocTools::append(const ContainerType& src, ContainerType &dest) {
    for (typename ContainerType::const_iterator i = src.begin(); 
         i != src.end(); i++) {
        dest.insert(*i);
    }
}
