/*
    Copyright (c) 2002-2010 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file ObjectState.icc
 *
 * Inline implementation of ObjectState class.
 *
 * @author Lasse Laasonen 2003 (lasse.laasonen-no.spam-tut.fi)
 * @author Pekka J‰‰skel‰inen 2010
 * @note reviewed 8 Jun 2004 by tr, jm, am, ll
 * @note rating: red
 */

#include "Conversion.hh"
#include "TCEString.hh"
#include <boost/format.hpp>

/**
 * Returns the parent of the ObjectState instance.
 *
 * If there is no parent, returns null pointer.
 *
 * @return Parent of the ObjectState instance.
 */
inline ObjectState*
ObjectState::parent() const {
    return parent_;
}


/**
 * Returns the name of the object.
 *
 * @return Name of the object.
 */
inline std::string
ObjectState::name() const {
    return name_;
}


/**
 * Sets the name of the object.
 *
 * @param name The new name.
 */
inline void
ObjectState::setName(const std::string& name) {
    name_ = name;
}


/**
 * Sets the value of the object.
 *
 * @param value Value of the object.
 */
inline void
ObjectState::setValue(const std::string& value) {
    value_ = value;
}


/**
 * Sets the value of the object.
 *
 * @param value Value of the object.
 */
inline void
ObjectState::setValue(int value) {
    value_ = Conversion::toString(value);
}


/**
 * Sets the value of the object.
 *
 * @param value Value of the object.
 */
inline void
ObjectState::setValue(double value) {
    value_ = Conversion::toString(value);
}


/**
 * Sets the value of the object.
 *
 * @param value Value of the object.
 */
inline void
ObjectState::setValue(bool value) {
    value_ = Conversion::toString(value);
}


/**
 * Returns the value of the node.
 *
 * @return Value of the node.
 */
inline std::string
ObjectState::stringValue() const {
    return value_;
}


/**
 * Returns the value of the node.
 *
 * @return Value of the node.
 * @exception NumberFormatException If the value cannot be converted to int.
 */
inline int
ObjectState::intValue() const
     {

    return Conversion::toInt(value_);
}


/**
 * Returns the value of the node.
 *
 * @return Value of the node.
 * @exception NumberFormatException If the value cannot be converted to
 *                                  double.
 */
inline double
ObjectState::doubleValue() const
     {

    return Conversion::toDouble(value_);
}


/**
 * Returns the value of the node.
 *
 * @return Value of the node.
 * @exception TypeMismatch If the value cannot be converted to boolean.
 */
inline bool
ObjectState::boolValue() const
     {

    int intValue;
    try {
        intValue = this->intValue();
    } catch (const NumberFormatException& exception) {
        TCEString strValue = this->stringValue();
        strValue = strValue.lower();
        if (strValue == "false") {
            return false;
        } else if (strValue == "true") {
            return true;
        } else {
            throw TypeMismatch(
                __FILE__, __LINE__, __func__,
                (boost::format("Cannot convert '%s' to a boolean.") %
                 strValue).str());
        }
    }

    return intValue;
}


/**
 * Returns the number of attributes of the ObjectState instance.
 *
 * @return Number of attributes.
 */
inline int
ObjectState::attributeCount() const {
    return attributes_.size();
}


/**
 * Returns the number of child instances of the ObjectState instance.
 *
 * @return The number of children.
 */
inline int
ObjectState::childCount() const {
    return children_.size();
}
