/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file MathTools.icc
 *
 * Inline implementations.
 *
 * @author Ari Mets‰halme 2005 (ari.metsahalme-no.spam-tut.fi)
 * @author Pekka J‰‰skel‰inen 2006 (pekka.jaaskelainen-no.spam-tut.fi)
 */

#include <cstdlib>
#include <cmath>
#include <ctime>
#include "Exception.hh"
#include "MathTools.hh"
#include "BaseType.hh"

/**
 * Returns the number of bits required to represent the given (nonzero) number
 * as an unsigned number. Gives result(1) for 0.
 *
 * @note assumes that integers are stored as 2's complement.
 *
 * @param number The number.
 * @return The number of bits required to represent the given number.
 */
inline int
MathTools::requiredBits(long unsigned int number) {
    if (number == 0) {
        return 1;
    } else {
        unsigned int bits = 0;
        while (number != 0) {
            number = number >> 1;
            bits++;
        }
        return bits;
    }
}

/**
 * Returns the number of bits required to represent the given number as
 * a signed integer.
 *
 * @note assumes that integers are stored as 2's complement.
 *
 * @param number The number.
 * @return The number of bits required to represent the given number.
 */

inline int
MathTools::requiredBitsSigned(long int number) {
    int bits = 1;
    while (number != -1 && number != 0) {
        number = number >> 1;
        bits++;
    }
    return bits;
}

/**
 * Returns the number of bits required to represent the given number as
 * a signed integer.
 *
 * @note assumes that integers are stored as 2's complement.
 *
 * @param number The number.
 * @return The number of bits required to represent the given number.
 */

inline int
MathTools::requiredBitsSigned(UInt32 number) {
    
    // first cast to a signed type
    int32_t numberSigned = static_cast<int32_t>(number);
    return requiredBitsSigned(static_cast<long int>(numberSigned));
}

/**
 * Returns the number of bits required to represent the given number as
 * a signed integer.
 *
 * @note assumes that integers are stored as 2's complement.
 *
 * @param number The number.
 * @return The number of bits required to represent the given number.
 */

inline int
MathTools::requiredBitsSigned(int number) {
    
    return requiredBitsSigned(static_cast<long int>(number));
}

/**
 * Returns the number of bits required to represent the given number as
 * a signed integer.
 *
 * @note assumes that integers are stored as 2's complement.
 *
 * @param number The number.
 * @return The number of bits required to represent the given number.
 */

inline int
MathTools::requiredBitsSigned(unsigned long number) {
    return requiredBitsSigned(static_cast<long int>(number));
}

/**
 * Returns the number of bits required to represent the give number as
 * an unsigned number. 0 is implicit 0.
 *
 * @note assumes that integers are stored as 2's complement.
 *
 * @param number The number.
 * @return The number of bits required to represent the given number.
 */
inline unsigned int
MathTools::bitLength(long unsigned int number) {
    unsigned int bits = 0;
    while (number != 0) {
        number = number >> 1;
        bits++;
    }
    return bits;
}



/**
 * Returns the value of the bit at a given position in an integer.
 *
 * @param integer The integer.
 * @param index Indicates which bit should be returned (0 = LSB).
 * @return The value of the bit indicated by the given index.
 */
inline bool
MathTools::bit(unsigned int integer, unsigned int index) {
    return (integer & (1 << index)) != 0;
}


/**
 * Chops a signed integer number to a given bit width.
 *
 * Overwrites all bits that do not fit in the given bit width with the sign
 * bit (the bit at position width - 1).
 *
 * This operation corresponds to reinterpreting the given number as a signed
 * word of given bit width.
 *
 * @param value A signed integer.
 * @param width Number of meaningful bits in the given integer.
 * @return The sign-extended value of the integer.
 * @exception OutOfRange If width > integer size
 */
inline int
MathTools::signExtendTo(int value, int width) {

    int bitsInInt = sizeof(int) * BYTE_BITWIDTH;
    if (width > bitsInInt) {
        throw OutOfRange(__FILE__, __LINE__, __func__);
    }

    value = value << (bitsInInt - width);
    value = value >> (bitsInInt - width);

    return value;
}


/**
 * Chops an unsigned integer number to a given bit width.
 *
 * Overwrites all bits that do not fit in the given bit width with zero.
 *
 * This operation corresponds to reinterpreting the given number as an
 * unsigned word of given bit width.
 *
 * @param value An unsigned integer.
 * @param width Number of meaningful bits in the given integer.
 * @return The zero-extended value of the integer.
 * @exception OutOfRange If width > integer size
 */
inline int
MathTools::zeroExtendTo(int value, int width) {

    int bitsInInt = sizeof(int) * BYTE_BITWIDTH;
    if (width > bitsInInt) {
        throw OutOfRange(__FILE__, __LINE__, __func__);
    }

    // and with a mask with only the lower 'width' bits '1'
    value = value & (~0u >> (bitsInInt - width));

    return value;
}


/**
 * Same as signExtendTo, except without additional overhead of exceptions
 *
 * @param value A signed integer.
 * @param width Number of meaningful bits in the given integer.
 * @note width must not exceed int bitwidth!
 * @return The sign-extended value of the integer.
 */
inline int
MathTools::fastSignExtendTo(int value, int width) {

    const int bitsInInt = sizeof(int) * BYTE_BITWIDTH;
    
    value = value << (bitsInInt - width);
    value = value >> (bitsInInt - width);

    return value;
}


/**
 * Same as zeroExtendTo, except without additional overhead of exceptions
 *
 * @param value An unsigned integer.
 * @param width Number of meaningful bits in the given integer.
 * @note width must not exceed int bitwidth!
 * @return The zero-extended value of the integer.
 */
inline int
MathTools::fastZeroExtendTo(int value, int width) {

    const int bitsInInt = sizeof(int) * BYTE_BITWIDTH;

    // and with a mask with only the lower 'width' bits '1'
    value = value & (~0u >> (bitsInInt - width));

    return value;
}


/**
 * Returns a random number between range min..max
 * 
 * @param min minimum value
 * @param max maximum value
 * @return The generated pseudo-random number
 */
inline int
MathTools::random(int min, int max) {
    static bool initialized = false;
    if (!initialized) {
        srand(std::time(0)); 
        initialized = true;
    }
    return (rand() % (max - min + 1)) + min;
}

/**
 * Rounds a number downwards to a number which is of power-2.
 */
inline unsigned int 
MathTools::roundDownToPowerTwo(unsigned int number) {
    unsigned int i = 0;
    if (number == 0) {
	return 0;
    }
    for (; 1u << i <= number; i++) ;
    return (1u<<i) >> 1;
}
