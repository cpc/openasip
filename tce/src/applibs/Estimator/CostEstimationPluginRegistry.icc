/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file CostEstimationPluginRegistry.icc
 *
 * Implementations of templated CostEstimationPluginRegistry class
 *
 * @author Pekka J‰‰skel‰inen 2005 (pjaaskel-no.spam-cs.tut.fi)
 * @note rating: red
 */

#include "boost/format.hpp"

#include "AssocTools.hh"
#include "FileSystem.hh"
#include "Exception.hh"
#include "Application.hh"

namespace CostEstimator {

/// the prefix of the function in the plugin file that is used to create new
/// estimator plugin instances
const std::string PLUGIN_CREATOR_FUNCTION_PREFIX = 
"create_estimator_plugin_";

/**
 * Constructor.
 */
template <typename T>
CostEstimationPluginRegistry<T>::CostEstimationPluginRegistry() {
    pluginTools_.addSearchPath(FileSystem::currentWorkingDir());
}

/**
 * Destructor.
 */
template <typename T>
CostEstimationPluginRegistry<T>::~CostEstimationPluginRegistry() {
    /// @todo call the deletion function in the plugin instead, just in case
    /// delete is overloaded in the plugin
    AssocTools::deleteAllValues(registry_);
}

/**
 * Returns the plugin that is stored in the given path.
 *
 * In case the plugin is not found, tries to open it.
 *
 * @param pluginFileName The path of the plugin.
 * @param pluginName The (class) name of the plugin.
 * @param sourceHDB The HDB from which the plugin should fetch its data.
 * @param pluginID The id of the plugin in the sourceHDB.
 * @return The plugin.
 * @exception IOException In case an I/O error occured.
 * @exception FileNotfound In case the plugin file was not found.
 * @exception DynamicLibraryException In case the plugin interface is broken.
 * @exception WrongSubClass In case the plugin is of wrong estimation plugin
 *                          type.
 */
template <typename T>
T& 
CostEstimationPluginRegistry<T>::plugin(
    const std::string& pluginFileName,
    const std::string& pluginName)
     {

    T* pluginInstance = NULL;

    if (AssocTools::containsKey(registry_, pluginFileName)) {
        pluginInstance = registry_[pluginFileName];
    } else {
        /// try to load the plugin
        try {
            std::string pluginFile = FileSystem::findFileInSearchPaths(
                Environment::estimatorPluginPaths(), pluginFileName);
            T* (*creator)();
            pluginTools_.importSymbol(
                PLUGIN_CREATOR_FUNCTION_PREFIX + pluginName, creator, 
                pluginFile);
            pluginInstance = creator();
        } catch (const FileNotFound& e) {
            throw FileNotFound(
                __FILE__, __LINE__, __func__, 
                (boost::format("Plugin file '%s' not found.") % 
                 pluginFileName).str());
        } catch (const Exception& e) {
            throw DynamicLibraryException(
                __FILE__, __LINE__, __func__, 
                std::string("Error while trying to import plugin. ") +
                e.errorMessage());
        }
        registry_[pluginFileName] = pluginInstance;
    }

    return *pluginInstance;
}

}
