/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file ReservationTable.icc
 *
 * Inline implementation of ReservationTable class.
 *
 * @author Pekka J‰‰skel‰inen 2007 (pekka.jaaskelainen-no.spam-tut.fi)
 * @note rating: red
 */

#include "BaseType.hh"

/**
 * Answers the contention query.
 *
 * Both reservation tables must be of same size. This implementation is
 * quite slow.
 *
 * @param anotherReservationTable The resource table of the issued operation.
 * @param cycle The column offset at which the another table is matched.
 */
inline bool
ReservationTable::conflictsWith(
    const ReservationTable& anotherReservationTable, int cycle) const {

    BitMatrix shifted(*this);
    for (int i = 0; i < cycle; ++i) {
        shifted.shiftLeft();
    }
    return anotherReservationTable.conflictsWith(shifted);
}

/**
 * Issues an operation.
 *
 * Merges the operation's resource table to this one.
 *
 * @param anotherReservationTable The resource table of the merged.
 */
inline void
ReservationTable::issueOperation(ReservationTable& anotherReservationTable) {
    BitMatrix::orWith(anotherReservationTable);
}

/**
 * Advances the simulation cycle count.
 *
 * The reservation table is shifted left once.
 *
 * @todo Check if the table is all zeros (idle), thus nothing needs to be done.
 */
inline void
ReservationTable::advanceCycle() {    
    BitMatrix::shiftLeft();
}

/**
 * Checks if the given resource is reserved at the given cycle.
 *
 * @param resource The resource row.
 * @param cycle The cycle column.
 */
inline bool
ReservationTable::isReserved(ResourceID resource, int cycle) const {
    return BitMatrix::bitAt(cycle, resource);
}
