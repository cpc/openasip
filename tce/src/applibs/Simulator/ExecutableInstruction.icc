/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file ExecutableInstruction.icc
 *
 * Inline method definitions of ExecutableInstruction class.
 *
 * @author Pekka J‰‰skel‰inen 2005 (pjaaskel-no.spam-cs.tut.fi)
 * @note rating: red
 */

#include "ExecutableInstruction.hh"
#include "ExecutableMove.hh"
#include "LongImmUpdateAction.hh"
#include "SequenceTools.hh"

/**
 * Executes the instruction.
 *
 * First all long immediate update actions are executed. 
 * Next, guards are evaluated to decide which moves will be squashed and
 * which not. Finally, data transports of the unsquashed moves are 
 * executed.
 */
inline void
ExecutableInstruction::execute() {

    // have to evaluate the guards before either a long immediate
    // or a register transport overwrites it
    for (std::size_t i = 0; i < moves_.size(); ++i) {
        moves_[i]->evaluateGuard();
    }
    for (std::size_t i = 0; i < moves_.size(); ++i) {
        moves_[i]->executeRead();
    }
    for (std::size_t i = 0; i < moves_.size(); ++i) {
        moves_[i]->executeWrite();
    }
    // long immediate latency is fixed to 1, zero latency is not
    // supported, thus the updates are not visible to the moves
    // in the same instruction
    for (std::size_t i = 0; i < updateActions_.size(); ++i) {
        updateActions_[i]->execute();
    }
    executionCount_++;
}

/**
 * Returns true in case the move with the given index was squashed the last 
 * time the instruction was executed.
 *
 * Being squashed means that the move is guarded and the guard expression
 * evaluated to false.
 *
 * @param moveIndex Index of the move to query.
 * @return True in case move was squashed.
 */
inline bool 
ExecutableInstruction::moveSquashed(std::size_t moveIndex) const {
    return moves_[moveIndex]->squashed();
}

/**
 * Returns true in case this instruction is considered a program
 * exit point: the simulation should stop *after* executing this instruction.
 */
inline bool
ExecutableInstruction::isExitPoint() const {
    return exitPoint_;
}

/**
 * Sets the instruction's exit point status.
 *
 * @see isExitPoint()
 */
inline void
ExecutableInstruction::setExitPoint(bool b) {
    exitPoint_ = b;
}
