/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */

/**
 * Adds a new delayed assignment to the queue
 * 
 * @param assignValue value to be assigned
 * @param assignTarget pointer to the target of the assignment
 * @param latency how long to wait in the queue until assignment can be done
 * @note if the latency is zero, the assignment is done immediately
 */
void inline
AssignmentQueue::addAssignment(
    const SimValue& assignValue, SimValue* assignTarget, int latency) {
    
    if (maxLatency_ == 0) { // ring buffer with a size of zero! do nothing.
        return;
    }
    
    assert(latency >= 0  && latency <= maxLatency_);
    
    if (latency == 0) {
        (*assignTarget) = assignValue;
        return;
    }
    
    int location = (position_ + latency) % maxLatency_;
    assignmentQueue_[location].push_back(
        Assignment(assignValue, assignTarget));
}

/**
 * Advances the assign queue by one cycle.
 * 
 * Reduces delayed assignments wait time by one
 */
void inline
AssignmentQueue::advanceClock() {
    
    if (maxLatency_ == 0) { // ring buffer with a size of zero! do nothing.
        return;
    }
    
    // Move to the next position in the ring buffer
    position_ = (position_ + 1) % maxLatency_;
    
    while (!assignmentQueue_[position_].empty()) {        
        // do the assignment and remove it
        Assignment& a = assignmentQueue_[position_].front();
        (*a.second) = a.first;
        assignmentQueue_[position_].pop_front();
    }
}

