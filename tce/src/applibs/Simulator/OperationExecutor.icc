/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file OperationExecutor.icc
 *
 * Inline definitions of OperationExecutor class.
 *
 * @author Pekka J‰‰skel‰inen 2005 (pjaaskel-no.spam-cs.tut.fi)
 * @note rating: red
 */

#include <string>

#include "PortState.hh"

/**
 * Returns parent of the executor.
 *
 * @return Parent of the executor.
 */
inline FUState&
OperationExecutor::parent() const {
    return *parent_;
}

/**
 * Returns the port state bound to a certain operation input or output.
 *
 * If no port is bound to the index, returns NullPortState.
 *
 * @param io Index of the operand.
 * @return PortState bound to the given index.
 * @exception OutOfRange If index is out of range.
 */
inline PortState&
OperationExecutor::binding(int io) const 
     {

    if (io < 1 || io > static_cast<int>(bindings_.size())) {
        std::string msg = "Operand index out of range";
        throw OutOfRange(__FILE__, __LINE__, __func__, msg);
    }
   
    if (bindings_[io - 1] == NULL) {
        return NullPortState::instance();
    } else {
        return *bindings_[io - 1];
    }
}

/**
 * Returns true if this OperationExecutor has pending operations.
 *
 * @return True if operations are pending.
 */
inline bool 
OperationExecutor::hasPendingOperations() const { 
    return hasPendingOperations_; 
}
