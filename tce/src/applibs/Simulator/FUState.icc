/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file FUState.icc
 *
 * Inline definition of FUState class.
 *
 * @author Pekka J‰‰skel‰inen 2005 (pjaaskel-no.spam-cs.tut.fi)
 * @note rating: red
 */

/**
 * Set function unit to triggered state.
 *
 * It means that an operation was triggered in the current clock cycle.
 */
inline void
FUState::setTriggered() {
    trigger_ = true;
    idle_ = false;
}

/**
 * Set next triggered operation.
 *
 * We do not check that executor for the operation is found, it is left
 * for client's responsibility. Executor is searched for in endClock().
 *
 * @param operation Operation to be triggered next.
 */
inline void
FUState::setOperation(Operation& operation) {
    nextOperation_ = &operation;
    nextExecutor_ = NULL;
}

/**
 * Set next triggered operation.
 *
 * Version in which the client has searched in advance the executor to be 
 * used for the operation.
 *
 * @param operation Operation to be triggered next.
 * @param executor The executor to be used.
 */
inline void
FUState::setOperation(Operation& operation, OperationExecutor& executor) {
    nextOperation_ = &operation;
    nextExecutor_ = &executor;
}

/**
 * A function for checking whether the FU is in idle state.
 *
 * If an FU is in idle state, its endClock() or advanceClock() need not
 * be called. This saves some time in simulation loop.
 *
 * @return True in case the FU is in idle state, that is, no operations are
 *         pending and there are no operations with clocked state.
 */
inline bool
FUState::isIdle() {
    return idle_ && context().isEmpty();
}
