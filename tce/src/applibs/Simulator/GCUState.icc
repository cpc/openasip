/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file GCUState.icc
 *
 * Inline definitions of GCUState class.
 *
 * @author Pekka J‰‰skel‰inen 2005 (pjaaskel-no.spam-cs.tut.fi)
 * @note rating: red
 */

#include "SimulatorConstants.hh"
#include "SimValue.hh"
#include "Exception.hh"

/**
 * Returns the current program counter value.
 *
 * @return Program counter value.
 */
inline InstructionAddress&
GCUState::programCounter() {
    return programCounter_;
}


/**
 * Returns the return address register.
 *
 * @return Return address register as SimValue.
 */
inline SimValue&
GCUState::returnAddressRegister() {
    return returnAddressRegister_;
}

/**
 * Sets new value to program counter.
 *
 * The value is updated after the delay set by control stages.
 *
 * @param value New value.
 */
inline void
GCUState::setProgramCounter(const InstructionAddress& value) {    
    if (operationPending_ && latency_ != operationPendingTime_) {
        throw Exception(
            __FILE__, __LINE__, __func__,
            "Cannot have jumps in delay slots.");
    }
    newProgramCounter_ = value;
    operationPending_ = true;
    operationPendingTime_ = latency_;
}

/**
 * Sets new value to return address.
 *
 * The value is updated immediately. Takes in account the delay slot
 * length.
 */
inline void
GCUState::setReturnAddress() {
    returnAddressRegister_ = 
        programCounter_ + static_cast<SIntWord>(latency_);
}

/**
 * Sets a wanted value to return address register immediately.
 *
 * The value is updated immediately. This is basically used to
 * initialize GCUState return address register to different value
 * than 0.
 *
 * @param value Address to set to return address register.
 */
inline void
GCUState::setReturnAddress(const InstructionAddress& value) {
    returnAddressRegister_ = value;
}
