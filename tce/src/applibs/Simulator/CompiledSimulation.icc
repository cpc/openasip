/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file CompiledSimulation.icc
 *
 * Inline definitions of CompiledSimulation class.
 *
 * @author Viljami Korhonen 2007 (viljami.korhonen-no.spam-tut.fi)
 * @author Pekka J‰‰skel‰inen 2009 (pekka.jaaskelainen-no.spam-tut.fi)
 * @note rating: red
 */

#include "Application.hh"

/**
 * Adds a SimValue to the FU's results list. 
 *
 * Used to simulate the FU latency.
 * 
 * @param results The FU results list
 * @param cycleCount # of cycles at the time of the addition
 * @param value value to be added
 * @param latency Latency of the FU
 */
void inline
CompiledSimulation::addFUResult(
    FUResultType& results, 
    ClockCycleCount cycleCount,
    const SimValue& value, 
    int latency) {

    int oldResultIndex = -1;

    // Find the next empty slot and put the result there
    for (int i = 0; i < results.size; ++i) {
        FUResultElementType& result = results.data[i];

        // clear overwritten results to make room for the ringbuffer.
        if (result.used) {
            // result ready
            if (result.cycles <= cycleCount) {
                // first old result
                if (oldResultIndex == -1) {
                    oldResultIndex = i;
                } else {
                    FUResultElementType& oldResult = 
                        results.data[oldResultIndex];
                    if (oldResult.cycles < result.cycles) {
                        // use the space of the old result for the new one.
                        oldResult.cycles = cycleCount + latency;
                        oldResult.value = value;
                        oldResult.used = true;
                        return;
                    } else {
                        result.used = false;
                        results.numberOfElements--;
                    }
                }
            }
        }
        if (!result.used) {
            result.cycles = cycleCount + latency;
            result.value = value;
            result.used = true;
            results.numberOfElements++;
            return;
        }
    }
    assert(0 && "Ringbuffer full!");
}

/**
 * Adds a UIntWord value to the FU's results.
 *
 * Used to simulate the FU latency.
 * 
 * @param results The FU results list
 * @param cycleCount # of cycles at the time of the addition
 * @param value value to be added
 * @param latency Latency of the FU
 */
void inline
CompiledSimulation::addFUResult(
    FUResultType& results, 
    ClockCycleCount cycleCount,
    const UIntWord& value, 
    int latency) {
        
    int oldResultIndex = -1;

    // Find the next empty slot and put the result there
    for (int i = 0; i < results.size; ++i) {
        FUResultElementType& result = results.data[i];

        // clear overwritten results to make room for the ringbuffer.
        if (result.used) {
            // result ready
            if (result.cycles <= cycleCount) {
                // first old result
                if (oldResultIndex == -1) {
                    oldResultIndex = i;
                } else {
                    FUResultElementType& oldResult = 
                        results.data[oldResultIndex];
                    if (oldResult.cycles < result.cycles) {
                        // use the space of the old result for the new one.
                        oldResult.cycles = cycleCount + latency;
                        oldResult.value = value;
                        oldResult.used = true;
                        return;
                    } else {
                        result.used = false;
                        results.numberOfElements--;
                    }
                }
            }
        }

        if (!result.used) {
            result.cycles = cycleCount + latency;
            result.value = value;
            result.used = true;
            results.numberOfElements++;
            return;
        }
    }
    assert(0 && "Ringbuffer full!");
}


/**
 * Grabs the current value from the FU results list.
 *
 * The current value is computed using the current cycle count, 
 * discarding "too old" (overwritten) results.
 * 
 * @param target Target of the assignment.
 * @param results The FU results to be checked for.
 * @param cycles The current cyclecount.
 */
void inline
CompiledSimulation::FUResult(
    SimValue& target, FUResultType& results, ClockCycleCount cycles) {
    
    int maxDiff = -2147483647;
        
    for (int i = 0; results.numberOfElements != 0 && i < results.size; ++i) {
        FUResultElementType& result = results.data[i];
        
        if (!result.used) {
            continue;
        }
        
        int diff = static_cast<int>(result.cycles - cycles);
        if (diff <= 0) {
            if (diff >= maxDiff) {
                maxDiff = diff;
                target = result.value;
            }
            result.used = false;
            results.numberOfElements--;
        } else {
             //i++;
        }
    }
}

void inline
CompiledSimulation::clearFUResults(FUResultType& results) {
    
    if (results.numberOfElements == 0) {
        return;
    }
    
    for (int i = 0; i < results.size; ++i) {
        results.data[i].used = false;
    }
    results.numberOfElements = 0;
}
