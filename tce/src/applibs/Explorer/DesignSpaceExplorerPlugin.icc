/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */

/**
 * @file DesignExplorerPlugin.icc
 *
 * Inline definitions of DesignExplorerPlugin class.
 *
 * @author Esa Määttä 2008 (esa.maatta-no.spam-tut.fi)
 */

#include "CompilerWarnings.hh"
IGNORE_CLANG_WARNING("-Wunused-local-typedef")
#include <boost/lexical_cast.hpp>
POP_CLANG_DIAGS

inline std::string 
DesignSpaceExplorerPlugin::description() const { 
    return "base class description"; 
}


/**
 * Adds a parameter to the plugin parameter list
 *
 * @param name Parameter name.
 * @param type Parameter type.
 * @param compulsory Is parameter compulsory.
 * @param defaultValue default value of the parameter is not compulsory.
 */
inline void
DesignSpaceExplorerPlugin::addParameter(
    TCEString name, 
    ExplorerPluginParameterType type, 
    bool compulsory, 
    TCEString defaultValue, 
    TCEString description) {

    parameters_.insert(Parameter(name, 
        ExplorerPluginParameter(
            name, type, compulsory, defaultValue,
            description)));
}


/**
 * Reads compulsory parameter from the plugin parameters.
 *
 * @param paramName Parameter name.
 * @param param Variable where to read the parameter.
 */
template <typename T>
void 
DesignSpaceExplorerPlugin::readCompulsoryParameter(
    const std::string paramName, T& param) const
     {

    param = parameterValue<T>(paramName);
}


/**
 * Reads optional parameter from the plugin parameters.
 *
 * @param paramName Parameter name.
 * @param param Variable where to read the parameter.
 */
template <typename T>
void 
DesignSpaceExplorerPlugin::readOptionalParameter(
    const std::string paramName, T& param) const
     {

    // optional parameters
    if (hasParameter(paramName)) {
        param = parameterValue<T>(paramName);
    } 
}


/**
 * Return parameter value.
 *
 * @param paramName Parameter name which value is to be returned.
 */
template <typename RT>
RT
DesignSpaceExplorerPlugin::parameterValue(const std::string& paramName) const
     {

    using boost::lexical_cast;
    using boost::bad_lexical_cast;

    PMCIt it = parameters_.find(paramName);
    if (it != parameters_.end()) {
        try {
            std::string value = it->second.value();
            if (it->second.type() == BOOL && 
                    (value == "true" || value == "false")) {
                value = value == "true" ? "1" : "0";
            }
            return lexical_cast<RT>(value);
        } catch (bad_lexical_cast &) {
            std::string msg = paramName + " had an illegal type of a value: " 
                + it->second.value();
            throw IllegalParameters(__FILE__, __LINE__, __func__, msg);
        }
    }
    std::string msg = paramName + " parameter has not been defined.";
    throw NotAvailable(__FILE__, __LINE__, __func__, msg);
}
