/*
    Copyright (c) 2002-2011 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file ExecutionPipelineResourceTable.icc
 *
 * Inline definitions for ExecutionPipelineResourceTable class.
 *
 * @author Heikki Kultala 2009 (heikki.kultala-no.spam-tut.fi)
 * @note rating: red
 */
#include "MapTools.hh"

unsigned int ExecutionPipelineResourceTable::pipelineSize() const {
    return operationPipelines_.size();
}

unsigned int ExecutionPipelineResourceTable::numberOfResources() const {
    return numberOfResources_;
}

unsigned int ExecutionPipelineResourceTable::maximalLatency() const {
    return maximalLatency_;
}
    
/**
 * Returns whether given pipeline resource is used for some operation
 * 
 * @param op OperationIndex for operation
 * @param cycle Cycle of the operation.
 * @param res resource which to query
 */
bool ExecutionPipelineResourceTable:: operationPipeline(
    int op, int cycle, int res) const {
    return operationPipelines_[op][cycle][res];
}

/**
 * Returns whether the given operation is supported by this FU.
 */
bool ExecutionPipelineResourceTable::hasOperation(
    const std::string& opName) const {
    return MapTools::containsKey(operationSupported_, opName);
}

/**
 * Gets the index of given operation in the FU.
 * 
 * If none found , throws Exception
 */
int ExecutionPipelineResourceTable::operationIndex(
    const std::string& opName) const {
    
    if (MapTools::containsKey(operationSupported_, opName)) {
        return MapTools::valueForKey<int>(operationSupported_, opName);
    } else {
        std::string msg = "Operation " + opName ;
        msg += " is not implemented in " + name() + "!";
        throw KeyNotFound(__FILE__, __LINE__, __func__, msg);
    }
}

/**
 * Returns  the operation latencies for all outputs of an operation.
 * 
 * @param operationIndex index of the operation. 
 */
const std::map<int,int>& ExecutionPipelineResourceTable::operationLatency(
    unsigned int operationIndex) const {
    return operationLatencies_[operationIndex];
}

const std::string& ExecutionPipelineResourceTable::name() const {
    return name_;
}
