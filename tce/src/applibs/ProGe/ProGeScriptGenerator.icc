/*
    Copyright (c) 2002-2009 Tampere University of Technology.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file ProGeScriptGenerator.icc
 *
 * Implementation of ProGeScriptGenerator class template part.
 *
 * @author Esa Määttä 2007 (esa.maatta-no.spam-tut.fi)
 * @note rating: red
 */

#include "CompilerWarnings.hh"
IGNORE_CLANG_WARNING("-Wkeyword-macro")
#include <boost/regex.hpp>
POP_CLANG_DIAGS

#include "FileSystem.hh"

/** 
 * Finds regex matching strings from a container.
 *
 * Finds std::string entries from containers that match given regex.
 * Case is ignored when matching.
 * 
 * @param perlre Perl syntax regex.
 * @param files Container for strings to match against.
 * @param found Strings that matched are appended to this list. 
 */
template <typename T>
void ProGeScriptGenerator::findFiles(
    const std::string& perlre,
    T files,
    std::list<std::string>& found) {

    static const boost::regex re(perlre, 
         boost::regex::perl|boost::regex::icase);

    typename T::const_iterator iter = files.begin();
    while (iter != files.end()) {
        if (regex_match(*iter, re)) {
            found.push_back(*iter);
        } 
        ++iter;
    }
}

/** 
 * Removes regex matching strings from a container.
 *
 * Finds std::string entries from containers that don't match given regex.
 * Case is ignored when matching. Strings that do not match are removed from
 * container. 
 * 
 * @param perlre Perl syntax regex.
 * @param files Container of strings.
 */
template <typename T>
void ProGeScriptGenerator::findFiles(
    const std::string& perlre,
    T& files) {

    static const boost::regex re(perlre, 
         boost::regex::perl|boost::regex::icase);

    typename T::iterator iter = files.begin();
    while (iter != files.end()) {
        if (!regex_match(*iter, re)) {
            iter = files.erase(iter);
        } else {
            ++iter;
        }
    }
}

/** 
 * Removes duplicate filenames considering their path from a container.
 * 
 * @param files Container holding the filenames.
 * @param rootDirectory Base directory for relative paths in files container.
 */
template <typename CONT>
void ProGeScriptGenerator::uniqueFileNames(
    CONT& files,
    const std::string& rootDirectory) {
    
    typename CONT::iterator ito = files.begin();
    typename CONT::iterator iti;
    while (ito != files.end()) {
        iti = files.begin();
        while (iti != files.end()) {
            if (iti != ito &&
                FileSystem::compareFileNames(*ito, *iti, rootDirectory)) {
                iti = files.erase(iti);
            } else {
                ++iti;
            }
        }
        ++ito;
    }
}

