/*
    Copyright (c) 2002-2009 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file CustomCommand.icc
 *
 * Inline implementation of CustomCommand class.
 *
 * @author Jussi Nykänen 2004 (nykanen-no.spam-cs.tut.fi)
 * @note reviewed 27 May 2004 by pj, jn, vpj, ll
 * @note rating: green
 */


/**
 * Returns the name of the command.
 *
 * @return The name of the command.
 */
inline std::string
CustomCommand::name() const {
    return name_;
}


/**
 * Sets the context.
 *
 * Context data is the data that CustomCommands access and modifies. In
 * Simulator's case it is a SimulationFrontend instance.
 *
 * @param context The context.
 */
inline void
CustomCommand::setContext(InterpreterContext* context) {
    context_ = context;
}


/**
 * Returns the context.
 *
 * @return The context.
 */
inline InterpreterContext*
CustomCommand::context() const {
    return context_;
}


/**
 * Sets the interpreter.
 *
 * Some CustomCommands needs to access the services of ScriptInterpreter
 * (for example, to fetch another CustomCommand).
 *
 * @param si The interpreter.
 */
inline void
CustomCommand::setInterpreter(ScriptInterpreter* si) {
    interpreter_ = si;
}


/**
 * Returns the interpreter.
 *
 * @return The interpreter.
 */
inline ScriptInterpreter*
CustomCommand::interpreter() const {
    return interpreter_;
}
