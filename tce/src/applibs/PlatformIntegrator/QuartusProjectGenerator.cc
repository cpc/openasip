/*
    Copyright (c) 2002-2010 Tampere University.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file QuartusProjectGenerator.hh
 *
 * Declaration of QuartusProjectGenerator class.
 *
 * @author Otto Esko 2010 (otto.esko-no.spam-tut.fi)
 * @note rating: red
 */

#include <vector>
#include <iostream>
#include <fstream>
#include "Exception.hh"
#include "FileSystem.hh"
#include "QuartusProjectGenerator.hh"
#include "PlatformIntegrator.hh"
#include "StringTools.hh"
#include "PlatformIntegratorTypes.hh"
using std::ofstream;
using std::endl;
using PlatInt::SignalMapping;

QuartusProjectGenerator::QuartusProjectGenerator(
    TCEString coreEntity,
    const PlatformIntegrator* integrator):
    ProjectFileGenerator(coreEntity, integrator) {
}

QuartusProjectGenerator::~QuartusProjectGenerator() {
}

void
QuartusProjectGenerator::writeProjectFiles() {
    
    writeQPFFile();

    writeQSFFile();

    writeScripts();
}


void
QuartusProjectGenerator::writeQPFFile() {
    
    TCEString qpfFileName = toplevelEntity() + ".qpf";
    ofstream qpfFile;
    qpfFile.open(qpfFileName.c_str());
    if (!qpfFile) {
        TCEString msg = "Couldn't open file " + qpfFileName + " for writing";
        IOException exc(__FILE__, __LINE__, "QuartusProjectGenerator", msg);
        throw exc;
    }
    qpfFile 
        << "# Generated by QuartusProject Generator" << endl << endl
        << "QUARTUS_VERSION = \"8.0\"" << endl << endl
        << "PROJECT_REVISION = \"" << toplevelEntity() << "\"" << endl;
    qpfFile.close();
}


void
QuartusProjectGenerator::writeQSFFile() {
    
    TCEString qsfFileName = toplevelEntity() + ".qsf";
    ofstream qsfFile;
    qsfFile.open(qsfFileName.c_str());
    if (!qsfFile) {
        TCEString msg = "Couldn't open file " + qsfFileName + " for writing";
        IOException exc(__FILE__, __LINE__, "QuartusProjectGenerator", msg);
        throw exc;
    }

    TCEString deviceFamily = integrator()->deviceFamily();
    TCEString deviceName = integrator()->deviceName();
    int fmax = integrator()->targetClockFrequency();
    qsfFile 
        << "# Generated by QuartusProjectGenerator" << endl << endl
        << "set_global_assignment -name FAMILY \"" << deviceFamily << "\""
        << endl
        << "set_global_assignment -name DEVICE " << deviceName << endl
        << "set_global_assignment -name TOP_LEVEL_ENTITY " << toplevelEntity()
        << endl
        << "set_global_assignment -name ORIGINAL_QUARTUS_VERSION 8.0" << endl
        << "set_global_assignment -name LAST_QUARTUS_VERSION 8.0" << endl
        << "set_global_assignment -name USE_GENERATED_PHYSICAL_CONSTRAINTS "
        << "OFF -section_id eda_palace" << endl
        << "set_global_assignment -name USE_CONFIGURATION_DEVICE ON" << endl
        << "set_global_assignment -name RESERVE_ALL_UNUSED_PINS \"AS "
        << "INPUT TRI-STATED\"" << endl
        << "set_global_assignment -name FMAX_REQUIREMENT \"" << fmax
        << " MHz\"" << endl;

    for (unsigned int i = 0; i < hdlFileList().size(); i++) {
        qsfFile << "set_global_assignment -name VHDL_FILE \"" 
                << hdlFileList().at(i) << "\"" << endl;
    }

    for (unsigned int i = 0; i < memInitFileList().size(); i++) {
        if (StringTools::endsWith(memInitFileList().at(i), ".mif")) {
            qsfFile << "set_global_assignment -name MIF_FILE \""
                    << memInitFileList().at(i) << "\"" << endl;
        } else if (StringTools::endsWith(memInitFileList().at(i), ".hex")) {
            qsfFile << "set_global_assignment -name HEX_FILE \""
                    << memInitFileList().at(i) << "\"" << endl;
        }
    }

    for (int i = 0; i < signalMappingCount(); i++) {
        const SignalMapping* mapping = signalMapping(i);
        qsfFile << "set_location_assignment " << mapping->first
                << " -to " << mapping->second << endl;
    }
    qsfFile.close();
}


void
QuartusProjectGenerator::writeScripts() {

    TCEString exportCommand = "";
    TCEString alteraLibPath =
        Environment::environmentVariable(
            "ALTERA_LIBRARY_PATH");

    if (alteraLibPath != "") {
        exportCommand << "export LD_LIBRARY_PATH=" << alteraLibPath << "\n";
    }


    TCEString synthesisScript = "quartus_synthesize.sh";
    ofstream synthesis;
    synthesis.open(synthesisScript.c_str());
    if (!synthesis) {
        TCEString msg = 
            "Couldn't open file " + synthesisScript + " for writing";
        IOException exc(__FILE__, __LINE__, "QuartusProjectGenerator", msg);
        throw exc;
    }
    synthesis
        << "#!/bin/bash" << endl
        << "# Generated by QuartusProjectGenerator of TCE" << endl << endl
        << exportCommand
        << "quartus_sh --flow compile " << toplevelEntity() << endl;
    synthesis.close();
    FileSystem::setFileExecutable(synthesisScript);

    TCEString programmingScript = "quartus_program_fpga.sh";
    ofstream programming;
    programming.open(programmingScript.c_str());
    if (!programming) {
        TCEString msg = "Couldn't open file " + programmingScript
            + " for writing";
        IOException exc(__FILE__, __LINE__, "QuartusProjectGenerator", msg);
        throw exc;
    }
    programming
        << "#!/bin/bash" << endl
        << "# Generated by QuartusProjectGenerator of TCE" << endl << endl
        << exportCommand
        << "quartus_pgm -c USB-Blaster -m JTAG -o p\\;"
        << toplevelEntity() << ".sof" << endl << endl;
    programming.close();
    FileSystem::setFileExecutable(programmingScript);
}
