// Copyright (c) 2002-2009 Tampere University.
// Copyright (c) 2012 Vinogradov Viacheslav
//
// This file is part of TTA-Based Codesign Environment (TCE).
// 
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//////////////////////////////////////////////////////////////////////////////
// Revisions  :
// 2012-04-04  1.0  Vinogradov 
//////////////////////////////////////////////////////////////////////////////

`timescale 10ns/1ns
module ENTITY_STR_ifetch 
#(
`include "ENTITY_STR_globals_pkg.vh"
,
`include "gcu_opcodes_pkg.vh"
,
`include "ENTITY_STR_imem_mau_pkg.vh"
)
    (
    // program counter in
    input[IMEMADDRWIDTH-1:0]    pc_in,
    //return address out
    output[IMEMADDRWIDTH-1:0]   ra_out,
    // return address in
    input[IMEMADDRWIDTH-1:0]    ra_in,
    // if(etch control signals
    input   pc_load,
    input   ra_load,
    input   pc_opcode,
    //instruction memory interface
    input[IMEMWIDTHINMAUS*IMEMMAUWIDTH-1:0]imem_data,
    output[IMEMADDRWIDTH-1:0] imem_addr,
    output imem_en_x,
    output[IMEMWIDTHINMAUS*IMEMMAUWIDTH-1:0]fetchblock,
    input   busy,

    // global lock
    output   glock,

    // external control interface
    input fetch_en,//fetch_enable

    input   clk ,
    input   rstx
    );

    // signals for program counter
    reg[IMEMADDRWIDTH-1:0] pc_reg;
    reg[IMEMADDRWIDTH-1:0] pc_prev_reg;
    reg[IMEMADDRWIDTH-1:0] next_pc;

    wire[IMEMADDRWIDTH-1:0] increased_pc;
    reg[IMEMADDRWIDTH-1:0] return_addr_reg;
    reg[IMEMWIDTHINMAUS*IMEMMAUWIDTH-1:0] instruction_reg;

    // internal signals for initializing and locking execution
    wire lock;

    integer reset_cntr;
    reg reset_lock;

    parameter IFETCH_DELAY=1;

    // enable instruction memory
    assign imem_en_x = !fetch_en;
    // do not fetch new instruction when processor is locked
    assign imem_addr = (~lock)?pc_reg:pc_prev_reg;

    // propagate lock to global lock
    assign glock = busy | reset_lock | ~fetch_en;
    assign ra_out= return_addr_reg;
    assign fetchblock = instruction_reg;

    assign lock = ~fetch_en | busy;

    always@(posedge clk or negedge rstx)
    if(~rstx)
    begin
        pc_reg          <= 0;
        pc_prev_reg     <= {IMEMADDRWIDTH{1'b0}};
        return_addr_reg <= {IMEMADDRWIDTH{1'b0}};
        instruction_reg <= {IMEMWIDTHINMAUS*IMEMMAUWIDTH{1'b0}};
        reset_cntr      <= 0;
        reset_lock      <= 1'b1;
    end
    else
    begin
        if( fetch_en && ~lock)
        begin
            pc_reg      <= next_pc;
            pc_prev_reg <= pc_reg;
        end

        if(~lock)
        begin
            if( reset_cntr < IFETCH_DELAY )
                reset_cntr <= reset_cntr + 1;
            else
            if( reset_cntr == IFETCH_DELAY )
                reset_lock <= 1'b0;

            // instruction register write
            if( fetch_en )
                instruction_reg <= imem_data[IMEMWIDTHINMAUS*IMEMMAUWIDTH-1:0];
            // return address
            if(ra_load)
                return_addr_reg <= ra_in;
            else
            if(pc_load && pc_opcode==IFE_CALL)
                // return address transformed to same form as all others addresses
                // provided as input
                return_addr_reg <= increased_pc;
        end
    end

    assign increased_pc = pc_reg + IMEMWIDTHINMAUS;

    always@(*)
    if(pc_load)
        next_pc = pc_in;
    else// no branch
        next_pc = increased_pc;

endmodule
