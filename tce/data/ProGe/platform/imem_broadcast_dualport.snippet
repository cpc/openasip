axi_imem_rvalid_in <= '1';
axi_imem_rdata_in <= (others => '0');
axi_imem_aready_in <= '1' when INSTR_b_aready_in = core_count_half_ones_c else '0';
broadcast_adata : for I in 0 to imem_data_width_g/dataw_c-1 generate
  axi_imem_adata_wide((I+1)*dataw_c-1 downto I*dataw_c) <= axi_imem_adata_out;
end generate;

broadcast_astrb_G : if imem_axi_addr_width_g-imem_addr_width_g > 0 generate
  broadcast_astrb : process(axi_imem_astrb_out, axi_imem_aaddr_out)
    variable addr_low : unsigned(imem_axi_addr_width_g-imem_addr_width_g-1 downto 0);
    variable addr_low_int : natural;
  begin
    addr_low := unsigned(axi_imem_aaddr_out(addr_low'RANGE));
    addr_low_int := to_integer(addr_low);
    axi_imem_astrb_wide <= (others => '0');
    axi_imem_astrb_wide(addr_low_int*4+3 downto addr_low_int*4) <= axi_imem_astrb_out;
  end process;
end generate;
dont_broadcast_astrb_G : if imem_axi_addr_width_g-imem_addr_width_g <= 0 generate
  axi_imem_astrb_wide <= axi_imem_astrb_out;
end generate;

imem_broadcast : for I in 0 to core_count_half_c-1 generate
  
  imem_broadcast_aaddr_b((I+1)*imem_addr_width_g-1 downto I*imem_addr_width_g)
    <= axi_imem_aaddr_out(imem_axi_addr_width_g-1 downto imem_axi_addr_width_g-imem_addr_width_g);

  INSTR_b_astrb_out(imem_strb_width_c*(I+1)-1 downto imem_strb_width_c*I) <= axi_imem_astrb_wide;
  INSTR_b_adata_out((I+1)*imem_data_width_g-1 downto I*imem_data_width_g) <= axi_imem_adata_wide;
end generate;
  
all_nreset <= '0' when tta_nreset = core_count_zeroes_c else '1';

INSTR_b_aaddr_out <= imem_broadcast_aaddr_b when all_nreset = '0'
                       else core_imem_addr_in(core_count_half_c*imem_addr_width_g-1 downto 0);
INSTR_b_awren_out <= (others => axi_imem_awren_out) when all_nreset = '0'
                       else (others => '0');
INSTR_b_avalid_out <= (others => axi_imem_avalid_out) when all_nreset = '0'
                       else not core_imem_en_x_in(imem_ctrl_range_lower);

INSTR_b_rready_out <= not core_imem_en_x_in(imem_ctrl_range_lower)
                    or not tta_nreset(imem_ctrl_range_lower);
core_imem_data_out(core_count_half_c*imem_data_width_g-1 downto 0)
  <= INSTR_b_rdata_in;
tta_aready(imem_ctrl_range_lower)    <= INSTR_b_aready_in;  
tta_rvalid(imem_ctrl_range_lower)   <= INSTR_b_rvalid_in;

INSTR_a_awren_out <= (others => '0');
INSTR_a_astrb_out <= (others => '0');
INSTR_a_adata_out <= (others => '0');
INSTR_a_aaddr_out(core_count_g/2*imem_addr_width_g-1 downto 0)
   <= core_imem_addr_in(core_count_g*imem_addr_width_g-1
                        downto core_count_half_c*imem_addr_width_g);
INSTR_a_avalid_out(core_count_g/2-1 downto 0) <= not core_imem_en_x_in(imem_ctrl_range_upper);  
INSTR_a_rready_out(core_count_g/2-1 downto 0) <= not core_imem_en_x_in(imem_ctrl_range_upper)
                    or not tta_nreset(imem_ctrl_range_upper);
core_imem_data_out(core_count_g*imem_data_width_g-1 downto core_count_half_c*imem_data_width_g)
  <= INSTR_a_rdata_in(core_count_g/2*imem_data_width_g-1 downto 0);

remainder_padding : if (core_count_g mod 2 = 1) generate
  INSTR_a_aaddr_out(INSTR_a_aaddr_out'HIGH downto INSTR_a_aaddr_out'HIGH - imem_addr_width_g + 1)
    <= (others => '0');
  INSTR_a_avalid_out(INSTR_a_avalid_out'HIGH) <= '0';
  INSTR_a_rready_out(INSTR_a_rready_out'HIGH) <= '0';
end generate;

tta_aready(imem_ctrl_range_upper)    <= INSTR_a_aready_in(core_count_g/2-1 downto 0);
tta_rvalid(imem_ctrl_range_upper)   <= INSTR_a_rvalid_in(core_count_g/2-1 downto 0);

core_busy          <= (not tta_aready) or (not tta_rvalid);
core_busy_out      <= core_busy;
