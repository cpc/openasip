-- Copyright (c) 2016 Tampere University
-- 
-- Permission is hereby granted, free of charge, to any person obtaining a
-- copy of this software and associated documentation files (the "Software"),
-- to deal in the Software without restriction, including without limitation
-- the rights to use, copy, modify, merge, publish, distribute, sublicense,
-- and/or sell copies of the Software, and to permit persons to whom the
-- Software is furnished to do so, subject to the following conditions:
-- 
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
-- 
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
-- FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
-- DEALINGS IN THE SOFTWARE.
--
--  Xilinx Single Port Byte-Write Read First RAM
--  This code implements a parameterizable single-port byte-write read-first
--  memory where when data is written to the memory, the output reflects the
--  prior contents of the memory location.

library ieee;
use ieee.std_logic_1164.all;
use std.textio.all;
use ieee.numeric_std.all;

entity ENTITY_STR_xilinx_blockram is generic (
    addrw : integer := 15;
    dataw : integer := 32);
  port (
    clk      : in std_logic;
    wren     : in std_logic;
    clken    : in std_logic;
    address  : in std_logic_vector(addrw-1 downto 0);
    data     : in std_logic_vector(dataw-1 downto 0);
    q        : out std_logic_vector(dataw-1 downto 0);
    byteena  : in std_logic_vector(dataw/8-1 downto 0)
    );
end ENTITY_STR_xilinx_blockram;

architecture rtl of ENTITY_STR_xilinx_blockram is

constant C_NB_COL     : integer := dataw/8;
constant C_COL_WIDTH  : integer := 8;
constant C_RAM_DEPTH : integer := 2**addrw;

signal addra : std_logic_vector(addrw-1 downto 0);
signal dina  : std_logic_vector(C_NB_COL*C_COL_WIDTH-1 downto 0);
signal wea   : std_logic_vector(C_NB_COL-1 downto 0);
signal ena   : std_logic;
signal douta : std_logic_vector(C_NB_COL*C_COL_WIDTH-1 downto 0);

type ram_type is array (C_RAM_DEPTH-1 downto 0) of std_logic_vector
                                              (C_NB_COL*C_COL_WIDTH-1 downto 0);
signal ram_data : std_logic_vector(C_NB_COL*C_COL_WIDTH-1 downto 0) ;


signal RAM_ARR : ram_type;

begin

  ena <= clken;
  wea <= byteena when wren = '1' else (others => '0');
  q <= douta;
  dina <= data;
  addra <= address;

process(clk)
begin
    if(clk'event and clk = '1') then
        if(ena = '1') then
            for i in 0 to C_NB_COL-1 loop
                if(wea(i) = '1') then
                    RAM_ARR(to_integer(unsigned(addra)))
                                ((i+1)*C_COL_WIDTH-1 downto i*C_COL_WIDTH)
                              <= dina((i+1)*C_COL_WIDTH-1 downto i*C_COL_WIDTH);
                end if;
            end loop;
            ram_data <= RAM_ARR(to_integer(unsigned(addra)));
        end if;
    end if;
end process;

douta <= ram_data;

end rtl;
