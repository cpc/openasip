/*
 * Copyright (C) 2025 Tampere University.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA
 */
//Module for the compressed interface handling

module cvxifcompressed_decoder
#(
    parameter type                    x_compressed_req_t           = logic,
    parameter type                    x_compressed_resp_t          = logic
) (
    input  logic               clk_i, //Might not need a clock since the response should be given on the same cycle as the input.
    input  logic               compressed_valid,
    input  x_compressed_req_t  x_compressed_req,
    output x_compressed_resp_t x_compressed_resp,
    output logic               compressed_ready
);
  //TODO Check the received compressed one is identifiable(x_compressed_req_t.instr) by checking through the compressed instr package
  //Output the relevant 32bit version on x_compressed_resp_t.instr and make x_compressed_resp_t.accept while compressed_ready asserted.
  //CPU can change all the values until the compressed_ready=1(CPU can retract as well, so the compressed decode task should be combinational)
  //Currently rejects all the incoming compressed requests.
  
  always_comb begin 
    if (compressed_valid) begin
      x_compressed_resp.accept  = '0;
      compressed_ready            = '1;
    end
    else begin
      x_compressed_resp.accept  = '0;
      compressed_ready            = '0;
    end
  end
  
endmodule


