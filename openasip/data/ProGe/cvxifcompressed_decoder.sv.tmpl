/*
 * Copyright (c) 2025 Tampere University.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
//Module for the compressed interface handling

module cvxifcompressed_decoder
#(
    parameter type                    x_compressed_req_t           = logic,
    parameter type                    x_compressed_resp_t          = logic
) (
    input  logic               clk_i, //Might not need a clock since the response should be given on the same cycle as the input.
    input  logic               compressed_valid,
    input  x_compressed_req_t  x_compressed_req,
    output x_compressed_resp_t x_compressed_resp,
    output logic               compressed_ready
);
  //TODO Check the received compressed one is identifiable(x_compressed_req_t.instr) by checking through the compressed instr package
  //Output the relevant 32bit version on x_compressed_resp_t.instr and make x_compressed_resp_t.accept while compressed_ready asserted.
  //CPU can change all the values until the compressed_ready=1(CPU can retract as well, so the compressed decode task should be combinational)
  //Currently rejects all the incoming compressed requests.
  
  always_comb begin 
    if (compressed_valid) begin
      x_compressed_resp.accept  = '0;
      compressed_ready            = '1;
    end
    else begin
      x_compressed_resp.accept  = '0;
      compressed_ready            = '0;
    end
  end
  
endmodule


