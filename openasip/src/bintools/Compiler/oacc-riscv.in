#!/usr/bin/env python3
#-*- coding: utf-8 -*-
# 
# Copyright (C) 2022-2024 Tampere University.
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
#
# @author Kari Hepola 2022-2024
#
# An LLVM-based compiler driver for RISC-V ASIPs
#
# Usage: oacc-riscv module1.c module2.c -o module
#
import os, sys, subprocess, optparse, shutil, glob, signal
import os.path
import re

from tempfile import mkdtemp, mkstemp
from optparse import OptionParser
from shutil import rmtree
from shutil import which
from subprocess import Popen, PIPE
from venv import create
from xml.etree import ElementTree as ET
import hashlib
import base64
import tempfile

scriptDir = os.path.abspath(os.path.dirname(sys.argv[0]))
runningInstalled = 'src/bintools/Compiler' not in scriptDir or not \
     os.path.exists(os.path.join("@abs_top_builddir@",
                                 "src/applibs/LLVMBackend/passes/.libs/LowerIntrinsics.so"))

### tce install prefix
tceInstalled = True
tceprefix = "@prefix@"
additionalTmpFiles = []
tempfiles = []

if 'TCE_INSTALL_DIR' in os.environ.keys():
    tceprefix = os.environ['TCE_INSTALL_DIR']
else:
    (exitCode, output) = subprocess.getstatusoutput("openasip-config --prefix")
    if exitCode != 0:
        tceInstalled = False
    else:
        tceprefix = output

llvmInstallPrefix = None
(exitCode, output) = subprocess.getstatusoutput("llvmtce-config --prefix")
if exitCode != 0:
    exitWithError("Couldn't find LLVM.")
else:
    llvmInstallPrefix = output

assert not runningInstalled or (tceInstalled and tceprefix != ""), \
        "Could not find TCE prefix. Is TCE installed in PATH?"


def generateLoweringMacros():
    op_list = ["max", "min", "maxu", "minu", "abs", "rotr", "rotl", "select"]
    macro_defs = ""
    with open(options.adf, 'r') as file:
        for line in file:
            for op in op_list:
                search_string = "<ota-operation>" + op + "</ota-operation>"
                if search_string in line:
                    macro_defs += "#define OPENASIP_" + op.upper() + " 1\n"
                    op_list.remove(op)

    definesPath = os.path.join(tmpTargetPluginDir, "OpenASIPDefines.h")
    definesFile = open(definesPath, "w")
    definesFile.write(macro_defs)
    definesFile.close()

def newlibIncludes():
    if runningInstalled:
        return "-I " + os.path.join(tceprefix, "riscv/include")
    else:
        return ( " -I " + os.path.join("@abs_top_srcdir@","newlib-1.17.0/newlib/libc/include") +
            " -I " + os.path.join("@abs_top_srcdir@","newlib-1.17.0/newlib/libm/include") + " ")

def newlibLibdir():
    if runningInstalled:
        return os.path.join(tceprefix, "riscv/lib")
    else:
        return os.path.join("@abs_top_builddir@", "newlib-1.17.0/riscv-llvm/riscv/newlib")

#find path for libgcc
def rtLibInclude():
    (exitCode, path) = subprocess.getstatusoutput("riscv32-unknown-elf-gcc -print-libgcc-file-name")
    if exitCode != 0 :
        exitWithError(path)
    return os.path.dirname(path)

def stdLibFlags():
    flags = ""
    flags += "-L " + rtLibInclude() + " "
    flags += "-L " + newlibLibdir() + " "
    return str(flags)

def run_command(command, echoStderr=True, echoStdout=True, echoCmd=False):
    """Runs the given shell command and returns its exit code.

    If echoOutput is False, stdout and stderr are redirected to /dev/null."""

    if echoCmd:
        print(command)
    
    from subprocess import Popen, PIPE

    if not echoStdout:
        stdoutRedir = open('/dev/null', 'w')
        stdoutFD = stdoutRedir.fileno()
    else:
        stdoutFD = None

    if not echoStderr:
        stderrRedir = open('/dev/null', 'w')
        stderrFD = stderrRedir.fileno()
    else:
        stderrFD = None

    process = \
       Popen(command, shell=True, stdin=PIPE, stdout=stdoutFD,
             stderr=stderrFD, close_fds=False)
    return process.wait()

def create_temp_file(suffix=""):
    tf = mkstemp(suffix=suffix, dir=tempDir)[1]
    tempfiles.append(tf)
    return tf

def cleanup_and_exit(retval=0):
    if not options.leave_tempfiles:
        rmtree(tempDir)
        for i in additionalTmpFiles:
            os.unlink(str(i))
    sys.exit(retval)

def calculate_hash(file_path):
    md5_hash = hashlib.md5()
    with open(file_path, "rb") as file:
        file_contents = file.read()
        md5_hash.update(file_contents)
    
    raw_md5_hash = md5_hash.digest()
    base64hash = base64.urlsafe_b64encode(raw_md5_hash).decode('utf-8')
    return base64hash

def move_file(src, dst):
    try:
        os.rename(src, dst)
    except OSError as e:
        # Fall back to using shutil.move() + os.rename
        try:
            dirname, basename = os.path.split(dst)
            temp = tempfile.NamedTemporaryFile(prefix=basename, dir=dirname).name
            shutil.move(src, temp)
            os.rename(temp, dst)
        except shutil.Error as se:
            print(f"Error moving file: {se}")
            exitWithError(1, "Error moving file: {se}")


def getLLVMTargetPlugin():
    if runningInstalled:
        riscvtdgen = "riscv-tdgen"
    else:
        riscvtdgen = "@abs_top_builddir@" + "/src/bintools/Compiler/riscv-tdgen/riscv-tdgen"

    exitCode = run_command(
        riscvtdgen + " -o " + tempDir + " -a " + options.adf,
        echoStdout=options.verbose,
        echoCmd=options.verbose)

    if exitCode != 0:
        exitWithError(1, "Error while generating instruction descriptions:\n")

    ISEHash = calculate_hash(ISEDescriptionPath)
    pluginPath = os.path.join(targetCacheDir, ISEHash + ".so")
    tmpPluginPath = os.path.join(tmpTargetPluginDir, "plugin.so")
    if not os.path.isfile(pluginPath):
        compileLLVMTargetPlugin()
        move_file(tmpPluginPath, pluginPath)
    return pluginPath

def compileLLVMTargetPlugin():
    shutil.copytree(llvmRISCVFileDir, tmpTargetPluginDir)
    move_file(ISEDescriptionPath, os.path.join(tmpTargetPluginDir,
        os.path.basename(ISEDescriptionPath)))
    
    generateLoweringMacros()
    
    oldPath = os.getcwd()
    os.chdir(tmpTargetPluginDir)

    cmd = "cp " + pluginMakefilePath + " " + "Makefile"
    exitCode = run_command(cmd, echoStdout=options.verbose,
                           echoCmd=options.verbose)
    if exitCode != 0:
        exitWithError(1, "Error: copying Makefile template " + cmd + "\n")

    # The file name of this differs in the installation dir compated to source tree
    # The RISC-V Target doesn't actually utilize anything from here so just create an empty file
    # TODO: Make this cleaner
    with open(llvmInstallPrefix + "/include/llvm/Config/config.h", 'w'):
        pass


    cmd = "make -j$(nproc)"
    if options.tce_build_mode:
        cmd = "make"
    exitCode = run_command(cmd, echoStdout=options.verbose,
                           echoCmd=options.verbose)
    if exitCode != 0:
        exitWithError(1, "Error: in compiling the target plugin" + cmd + "\n")

    os.chdir(oldPath)
def parse_options():
    parser = OptionParser()
    parser.add_option("-o", "--output", dest="output",
                      help="The output file.", metavar="FILE",
                      default=None)

    parser.add_option("-a", "--adf", dest="adf",
                      help="The OpenASIP architecture description format file.", 
                      metavar="FILE", default=None)
    
    parser.add_option("--mattr", dest="mattr",
                      help="Target architecture features (e.g., +m,+a,+c)",
                      default="-c,+m")

    parser.add_option("--march", dest="march",
                      help="Target architecture (riscv32 or riscv64)", 
                      metavar="string", default="riscv32")

    parser.add_option('-O', '--optimization-level',
                      type="int", action="store", metavar='level',
                      dest='optimization_level', default=3,
                      help="Optimization level. O0-O3")

    parser.add_option("-c", "--compile-only", dest="compile_only",
                      action="store_true", default=False,
                      help="Compile only. Do not assemble or link.")
    
    parser.add_option("-S", dest="gen_asm",
                      action="store_true", default=False,
                      help="Only run preprocess and compilation steps.")

    parser.add_option("-d", "--leave-tempfiles", dest="leave_tempfiles",
                      action="store_true", default=False,
                      help="Do not delete the temporary files.")

    parser.add_option("-v", "--verbose", dest="verbose", action="store_true",
                      help="Verbose output. Output the commands executed etc.", default=False)

    parser.add_option('-D', '--preprocessor-define',
                      type="string", action="append", metavar='string',
                      dest="defines", default=[],
                      help="Passed to clang.")
                      
    parser.add_option('-I', '--include-directory',
                      type="string", action="append", metavar='directory',
                      dest="include_dirs", default=[],
                      help="Passed to clang.")

    parser.add_option('-l', '--library-name',
                      type="string", action="append", metavar='string',
                      dest="lib_name", default=[],
                      help="Passed to the linker.")

    parser.add_option('-L', '--library-directory',
                      type="string", action="append", metavar='directory',
                      dest="lib_dir", default=[],
                      help="Passed to the linker.")
    
    parser.add_option('-W', '--warning',
                      type="string", action="append", metavar='type',
                      dest="warnings", default=[],
                      help="Ignored.")

    parser.add_option('--unroll-threshold',
                      type="int", action="store", metavar='LLVM_INSTRUCTION_COUNT',
                      dest='unroll_threshold', default=100,
                      help="Unroll loops in case the unrolled loop body size will be less " + \
                      "than the given number of LLVM instructions. Use 0 to disable " + \
                      "loop unrolling.")
    
    parser.add_option('--disable-inlining', action="store_true",
                      dest="noinline", default=False,
                      help="Disable function inlining.")

    parser.add_option('--inline-threshold',
                      type="int", action="store",
                      dest='inline_threshold', default=200,
                      help="Control the amount of inlining.")

    parser.add_option('--extra-llvm-opts',
                      type="string", action="store",
                      metavar='opt1,opt2,opt3', dest='extra_llvm_opts', default="",
                      help="List of additional LLVM passes to run after the regular ones.")

    parser.add_option('--disable-internalize',
                      action="store_true", dest='disable_internalize', default=True,
                      help="Do not internalize (make static) global symbols by default.")

    parser.add_option('-k', '--keep-symbols',
                      type="string", action="store",
                      metavar='sym1,sym2,sym3', dest='keep_symbols', default="",
                      help="List of symbols whose optimization away is prevented. "
                      "If you are using this, remember to define "
                      "at least 'main' symbol.")

    parser.add_option('--output-format',
                      type="string", action="store", metavar='string',
                      dest="output_format", default="",
                      help="Emit program as a text file, bin or hex.")

    parser.add_option('-B',
             type="string", action="append", metavar='directory',
             dest="B_cc_switches", default=[],
             help="Passed to clang.")

    parser.add_option('-f',
             type="string", action="append", metavar='opt_var',
             dest="f_cc_switches", default=[],
             help="Passed to clang.")

    parser.add_option('-g',
             action="store_true",
             dest="g_cc_switch", default=False,
             help="Passed to clang.")
    
    parser.add_option('--isystem',
             type="string", action="append", metavar='directory',
             dest="isystem_cc_switches", default=[],
             help="Passed to clang as -system switch. Also -isystem is supported.")
    
    parser.add_option('--tce-build-mode', action="store_true",
             dest="tce_build_mode", default=False,
             help="Use when building TCE's bitcode libraries. Sets build directory search paths correctly.")

    parser.add_option('--init-sp',
             type="long", action="store", metavar='value',
             dest='init_sp', default=None,
             help="Set the initial stack pointer of the program to the given value.")

    parser.add_option('--data-start',
             type="long", action="store", metavar='value',
             dest='data_start', default=None,
             help="Set the global data start address for the default address space. The default is the first address of the address space.")

    parser.add_option('--lld', action="store_true",
             dest="lld", default=False,
             help="Use the LLVM lld linker instead of the gcc object code linker.")

    parser.add_option('--generate-plugin', action="store_true",
             dest="generate_plugin", default=False,
             help="Generate plugin into the cache")
    
    parser.add_option('--clear-plugin-cache', action="store_true",
             dest="clear_plugin_cache", default=False,
             help="Clear plugin cache")



    # fix gcc switches, which cannot be represented in OptionParser format by adding extra "-" before switch
    args = []
    for opt in sys.argv[1:]:
        if opt.startswith("-isystem"): opt = "-" + opt
        if opt.startswith("-cl-"): opt = "-" + opt
        args.append(opt)

    # parse valid args
    options, args = parser.parse_args(args)

    if options.tce_build_mode:
        # Ensure we find the OSAL directories to produce the tceopgen macros for
        # launching STDOUT etc. from C implementations in newlib.
        os.environ['TCE_DEVEL_MODE'] = '1'
    return (options, args)

def exitWithError(status, errorMessage=None):
    if errorMessage is not None:
        print(errorMessage, sys.stderr)
    if not options.leave_tempfiles:
        rmtree(tempDir)
    sys.exit(status)

def optimizeBytecode(inFile):
    default_passes = "default<O3>"
    if not options.noinline:
        default_passes += ",inline"
        if options.inline_threshold:
            default_opts = "-inline-threshold=%d " % options.inline_threshold
    default_opts += "-unroll-allow-partial -unroll-threshold=%d " % options.unroll_threshold
    optSwitches = ""
    if options.unroll_threshold == 0:
        default_opts += " --disable-loop-unrolling "
    if options.optimization_level == 1 or options.disable_internalize:
        # disable-internalize missing in llvm 3.6
        optSwitches = (default_opts)
    elif options.optimization_level > 1:
        optSwitches = (" -internalize "+ default_opts)
    
    internalize_api_list = " -internalize-public-api-list=" \
                           "_start,_pthread_start,_dthread_start,memcpy"
    if options.keep_symbols != "":
        internalize_api_list += "," + options.keep_symbols

    optSwitches += internalize_api_list

    if options.extra_llvm_opts != "":
        extra_opts = options.extra_llvm_opts.split(',')
        optSwitches += ' -' + ' -'.join(extra_opts)
    outputName = os.path.join(tempDir, os.path.basename(inFile) + "_optimized.bc")
    command = "opt -passes=\"" + default_passes + '\"' + " -f " + inFile + " -o " + outputName + " " + optSwitches
    exitCode = run_command(command, echoCmd=options.verbose)
    if exitCode != 0:
        exitWithError(1, "Error while optimizing bytecode: " + command + "\n")
    return outputName

def compile_to_bitcode(input_files):    
    bc_files = []
    compileFlags = ""
    compileFlags += "-O" + str(options.optimization_level) + " "
    if not options.tce_build_mode:
        compileFlags += newlibIncludes() + " "
    if options.g_cc_switch:
        compileFlags += "-g "
    for i in options.include_dirs:
        compileFlags += "-I" + i + " "
    for i in options.defines:
        compileFlags += "-D" + i + " "
    if options.unroll_threshold == 0:
        compileFlags += " -fno-unroll-loops "

    for i in options.f_cc_switches:
        if True:
            # Some of the gcc -f flags not supported by clang,
            # just skip them silently for now for gcc compatibility.
            if i == "short-enums": continue
        compileFlags += "-f" + i + " "

    for i in options.isystem_cc_switches:
        compileFlags += "-isystem" + i + " "

    compileFlags += "-include " + tceOpsPath + " "

    for w in options.warnings:
        # Types of warnings supported by the compiler:
        white_list = []
        if True:
            white_list = ['no-empty-body',
                          'no-dangling-else',
                          'no-unknown-warning-option',
                          'no-bad-literal',
                          'no-literal-range',
                          'no-pointer-sign',
                          'no-return-type',
                          'no-unused-value',
                          'no-ignored-qualifiers',
                          'no-incompatible-pointer-types-discards-qualifiers',
                          'no-implicit-function-declaration']
        if w in white_list:
            compileFlags += "-W" + w + " "

    # generate tceops.h
    if runningInstalled:
        tceopgen = "tceopgen"
    else:
        tceopgen = "@abs_top_builddir@" + "/src/bintools/Compiler/tceopgen/tceopgen"

    exitCode = run_command(
        tceopgen + " -o " + tceOpsPath, echoCmd=options.verbose)

    if exitCode != 0:
        exitWithError(1, "Error while generating custom operation macros:\n")

    for input_file in input_files:
        bc_file = create_temp_file(input_file.replace("/", ".") + ".bc")
        retval = \
            run_command("clang -target %s -D__OA_RISCV__ -I %s %s -c -emit-llvm %s -o %s" % \
            (options.march, tempDir, compileFlags, input_file, bc_file), echoCmd=options.verbose)

        if retval != 0: cleanup_and_exit(retval)
        bc_files.append(bc_file)

    bc_file = create_temp_file(".whole-program.bc")

    retval = run_command("llvm-link %s -o %s" % (" ".join(bc_files), bc_file), echoCmd=options.verbose)
    opt_bc_file = optimizeBytecode(bc_file)
    if retval != 0: cleanup_and_exit(retval)

    return opt_bc_file

def generate_code(bc_file, objectCode=True, output=None):
    if output is None:
        asm_file = create_temp_file(".o")
    else:
        asm_file = output
    fileType = "--filetype=obj"
    if objectCode == False :
        fileType = "--filetype=asm"
    retval = run_command("llc %s -load %s --march=%s  --mattr=%s %s -o %s" %
    (fileType, getLLVMTargetPlugin(), options.march, options.mattr,
     bc_file, asm_file),echoCmd=options.verbose)
    if retval != 0: cleanup_and_exit(retval)
    return [asm_file] 


def link(obj_files, output):
    if which("ld.lld") is None:
        exitWithError("lld must be installed for linking")
    if which("riscv32-unknown-elf-gcc") is None:
        exitWithError("RISCV GNU Toolchain must be installed")
    init_asm = os.path.join(tempDir, "init.S")
    init_out = os.path.join(tempDir, "init.o")
    link_script = os.path.join(tempDir, "riscv.ld")
    command = "riscv32-unknown-elf-gcc -D__OA_RISCV__ -c %s -o %s" % (init_asm, init_out)
    retval = run_command(command, echoCmd=options.verbose,
                         echoStderr=options.verbose, echoStdout=options.verbose)

    if retval != 0:
        exitWithError(retval, "Error in compiling. Run with -v to see verbose output")
    obj_files = " ".join(obj_files)
    if retval != 0: cleanup_and_exit(retval)
    lib_names = ""
    lib_dirs = ""
    for lib_name in options.lib_name:
        lib_names += "-l" + lib_name + " "
    for lib_dir in options.lib_dir:
        lib_dirs += "-L " + lib_dir + " "

    extra_flags = stdLibFlags()

    command = "riscv32-unknown-elf-ld  %s %s %s -Ttext=0 -T %s %s %s -o %s -lc -lm -lgcc" % \
        (lib_names, lib_dirs, extra_flags, link_script, init_out, obj_files, output)

    if options.lld:
        command = "ld.lld -lc -lm -lgcc  %s %s %s -Ttext=0 -T %s %s %s -o %s" % \
        (lib_names, lib_dirs, extra_flags, link_script, init_out, obj_files, output)

    retval = run_command(command, echoCmd=options.verbose,
                         echoStderr=options.verbose, echoStdout=options.verbose)

    if retval != 0:
        exitWithError(retval, "Error in linking. Run with -v to see verbose output")
    return output

def generate_linker_script(options):
    root = ET.parse(options.adf)
    found_instr = False
    found_data = False
    instr_start = 0
    data_start = 0
    data_end = 0
    root = ET.parse(options.adf)
    address_spaces = root.findall(".//*[min-address]")
    for i in range(len(address_spaces)):
        if address_spaces[i].attrib["name"] == "instructions":
            minAddr = address_spaces[i].find("min-address")
            if minAddr == None:
                exitWithError("Address space 'instructions' missing min-address tag")
            instr_start = minAddr.text
            found_instr = True
            continue
        elif address_spaces[i].attrib["name"] == "data":
            minAddr = address_spaces[i].find("min-address")
            maxAddr = address_spaces[i].find("max-address")
            if minAddr == None:
                exitWithError("Address space 'data' missing min-address tag")
            if maxAddr == None:
                exitWithError("Address space 'data' missing max-address tag")
            data_start = minAddr.text
            data_end = str(int(maxAddr.text) - 3)
            found_data = True
    if found_data == False:
        exitWithError("Could not find address space named 'data'")
    if found_instr == False:
        exitWithError("Could not find address space named 'instructions'")
    if int(instr_start) % 4 != 0:
        exitWithError("Address space 'instructions' start address not word aligned")
    if int(data_start) % 4 != 0:
        exitWithError("Address space 'data' start address not word aligned")
    if int(data_end) % 4 != 0:
        exitWithError("Address space 'data' end address not word aligned")
    linker_script = "ENTRY(_start)\n"\
    "__mem   = " + str(instr_start) + ";\n"\
    "__stack = " + str(data_end) + ";\n"\
    "__global = " + str(data_start) + ";\n"\
    "_end = " + str(data_start) + ";\n"\
    "\n"\
    "SECTIONS\n"\
    "{\n"\
    "    . = __mem;\n"\
    "    .text : {\n"\
    "        *(.text*)\n"\
    "    }\n"\
    "\n"\
    "    .data : {\n"\
    "        *(.sbss)\n"\
    "        *(COMMON)\n"\
    "        *(.bss)\n"\
    "        *(.sdata)\n"\
    "        *(.rodata)\n"\
    "        *(.data*)\n"\
    "        *(.got*)\n"\
    "    }\n"\
    "}"
    file_path = os.path.join(tempDir, "riscv.ld")
    text_file = open(file_path, "w")
    text_file.write(linker_script)
    text_file.close()

def generate_start_func():
    start_func =  ".global _start\n"\
    ".global __global\n"\
    ".global __stack\n"\
    ".global end\n"\
    ".section .text\n"\
    "_start:\n"\
    "   la    t0, __global\n"\
    "   la    sp, __stack\n"\
    "   call  main\n"\
    "end:\n"\
    "   j end\n"
    file_path = os.path.join(tempDir, "init.S")
    text_file = open(file_path, "w")
    text_file.write(start_func)
    text_file.close()

def generate_image(options, elf_file, final_output):
    if which("riscv32-unknown-elf-elf2hex") is None:
        exitWithError("elf2hex must be installed for \
        generating RISC-V images as a text file")
    hex_file = final_output
    if options.output_format == "bin":
        hex_file = create_temp_file(".hex")
    if options.output_format == "bin" or options.output_format == "hex":
        run_command("riscv32-unknown-elf-elf2hex --bit-width 32 \
        --input " + elf_file + " > " + hex_file)
        if options.output_format == "bin":
            run_command("oa-hex2bin \
            -w 32 -o " + final_output + " " + hex_file)

def check_input_files(input_files):
    if len(input_files) == 0:
        exitWithError(1, "No input files given")
    else:
        first_extension = None
        for file in input_files:
            file_extension = file.split('.')[-1]
            if first_extension is None:
                first_extension = file_extension
            elif file_extension != first_extension:
                exitWithError(1, "All files must have the same extension")
            if file_extension.lower() not in ['c', 's', 'S']:
                exitWithError(1, "The file extension must be .c, .s, or .S")
        
        # Check if all files have 's' or 'S' extension
        if first_extension.lower() in ['s', 'S']:
            return True
    return False


def assemble(input_files, output=None):
    if len(input_files) != 1:
        exitWithError(1, "Assembler only supports 1 input file currently")
    asm_file = output
    all_files = " ".join(input_files)
    run_preprocess = input_files[0].endswith('.S')
    if output is None:
        asm_file = create_temp_file(".o")

    fileType = "--filetype=obj"
    preprocessed_file = input_files[0]
    if run_preprocess:
        preprocessed_file = create_temp_file(".s")
        compileFlags = ""
        # todo: defines
        for i in options.defines:
            compileFlags += "-D" + i + " "
        for i in options.include_dirs:
            compileFlags += "-I" + i + " "
        retval = run_command("clang -E %s -o %s %s" %
        (compileFlags, preprocessed_file, all_files),echoCmd=options.verbose)
    retval = run_command("llvm-mc %s -load %s --arch %s %s -o %s" %
    (fileType, getLLVMTargetPlugin(), options.march,
     preprocessed_file, asm_file),echoCmd=options.verbose)
    if retval != 0: cleanup_and_exit(retval)
    return [asm_file] 

if __name__ == "__main__":
    options, args = parse_options()

    global targetCacheDir
    targetCacheDir = os.path.expanduser("~/.cache/openasip/oacc-riscv")

    global tempDir
    tempDir = mkdtemp("","oacc-")


    if options.clear_plugin_cache:
        so_files = glob.glob(os.path.join(targetCacheDir, '*.so'))
        # Remove each .so file
        for file in so_files:
            os.remove(file)
        cleanup_and_exit(0)

    isAsm = False

    if not options.generate_plugin:
        isAsm = check_input_files(args)

    global tmpTargetPluginDir
    global llvmRISCVFileDir
    global tceOpsPath
    global pluginMakefilePath

    os.makedirs(targetCacheDir, exist_ok=True)
    tceOpsPath = os.path.join(tempDir, "tceops.h")
    llvmRISCVFileDir = os.path.join(llvmInstallPrefix, "riscv/LLVMRISCVTarget/RISCV")
    tmpTargetPluginDir = os.path.join(tempDir, "RISCV")

    ISEDescriptionPath = os.path.join(tempDir,"RISCVInstrInfoOpenASIP.td")

    if runningInstalled:
        pluginMakefilePath = os.path.join(tceprefix,
                                "share/openasip/data/riscv/RISCVPluginMakefile")
    else:
        pluginMakefilePath = os.path.join("@abs_top_builddir@",
                                "data/riscv/RISCVPluginMakefile")
    if options.adf is None:
        adf = ""
        if runningInstalled:
            adf = os.path.join(tceprefix,
                                 "share/openasip/data/mach/rv32im.adf")
        else:
            adf = os.path.join("@abs_top_builddir@",
                                    "data/mach/rv32im.adf")
        options.adf = adf

    pluginPath = getLLVMTargetPlugin()

    if options.generate_plugin:
        cleanup_and_exit(0)

    final_output = options.output
    if options.output is None:
        final_output = "a.out"
        
    if not options.compile_only and not options.gen_asm:
        generate_start_func()
        generate_linker_script(options)

    elf_file = final_output
    if options.output_format == "bin" or options.output_format == "hex":
        elf_file = create_temp_file(".hex")
    
    obj_files = []
    if isAsm:
        if options.compile_only:
            obj_files = assemble(args, final_output)
            cleanup_and_exit(0)
        else:
            obj_files = assemble(args)
    else:
        bc_file = compile_to_bitcode(args)
        if options.compile_only or options.gen_asm:
            generate_code(bc_file, not options.gen_asm, final_output)
            cleanup_and_exit(0)
        obj_files = generate_code(bc_file, True)
    
    #Link with generated start and linker script
    link(obj_files, elf_file)
    if options.output_format == "bin" or options.output_format == "hex":
        generate_image(options, elf_file, final_output)

    cleanup_and_exit(0)
